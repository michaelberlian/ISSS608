---
title: "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R"
date: "21 January 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
editor: visual
---

## Prologue

in this hands on exercise, I will explore the functions of **ggiraph** and **plotlyr** packages

## Getting started

we are going to utilise several packages in this hands on exercise, they are:

-   ggiraph: to create intractivity in ggplot graphics

-   plotly: to plot interactive graphs

-   DT: to create interactive table for HTML pages (interface to the java script DataTables library)

-   tidyverse: R packages to support data science, analysis, and creating statistical graphs

-   patchwork: to combine multiple graphs into single figures

```{r}
pacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)
```

## Importing data

for this hands on exercise, we are going to import Exam_data.csv using the `read_csv()` from readr packages.

```{r}
exam_data <- read_csv('data/Exam_data.csv')
```

## Interactive data visualisation - ggiraph methods

ggiraph is an extension of ggplot2 to create interactive ggplot graphics.

there are 3 arguments to be used from ggiraph toward ggplot geometries, they are:

-   Tooltip: is to display data when mouse is hovering the elements

-   Onclick: give action when the element is clicked

-   Data_id: containing the id to be associated with the elements

### Tooltip 1

the example below consists of 2 part. the first part is where the graph is created and the next one `girafe()` is to create an interactive svg object. the plot below will show the information of the element when mouse hover on it.

```{r}
p <- ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE, 
    binwidth = 1, 
    method = "histodot") +
  scale_y_continuous(NULL, 
                     breaks = NULL)
girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618
)
```

### Tooltip 2

the codechunk below preview on how to create tooltips with multiple information on the elements

```{r}
exam_data$tooltip <- c(paste0(
  "Name = ", exam_data$ID,
  "\n Class = ", exam_data$CLASS
))

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = exam_data$tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot"
  ) +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 8,
  height_svg = 8*0.618
)
```

### Customising tooltip

```{r}
tooltip_css <- "background-color:white;
                font-style:bold;
                color:black;"

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(tooltip = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = 'histodot'
  ) +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_tooltip(
      css = tooltip_css
    )
  )
)
```

### Statistic tooltip

below is way to create interactive graph with statistical tooltip to the elements. we are going to plot the average of math score of each race with 90% confidence interval

```{r}
tooltip <- function(y, ymax, accuracy = .01) {
  mean <- scales::number(y, accuracy = accuracy)
  sem <- scales::number(ymax - y, accuracy = accuracy)
  paste("mean maths scores:", mean, "+/-", sem)
}

gg_point <- ggplot(data = exam_data,
                   aes(x=RACE)) +
  stat_summary(aes(y = MATHS,
                   tooltip = after_stat(
                     tooltip(y, ymax)
                   )),
               fun.data = "mean_se",
               geom = GeomInteractiveCol,
               fill = "light blue") +
  stat_summary(aes(y = MATHS),
               fun.data = mean_se,
               geom = 'errorbar',
               width = 0.2,
               size = 0.2) 

girafe(
  ggobj = gg_point,
  width_svg = 8,
  height_svg =  8*0.618
)
```

### Hover effect

here we are going to try highlighting effect on hover. we are going to fill the same class and inverse (greyed) the rest

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = 'histodot'
  ) + 
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #000000;"),
    opts_hover_inv(css = "opacity:0.2;")
  )
)
```

### Tooltip and hover

we are going to combine the tooltip element and the hover effect together. greyed out the one thats not in the same class and label the dots with the class it belongs to

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = CLASS,
        tooltip = CLASS),
    stackgroups = TRUE,
    binwidth = 1,
    method = 'histodot'
  ) + 
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  ggobj = p,
  width_svg = 6,
  height_svg = 6*0.618,
  options = list(
    opts_hover(css = "fill: #000000;"),
    opts_hover_inv(css = "opacity:0.2;")
  )
)
```

### Onclick

here is the example of on click. we are going to open a new tab of of moe website when one of the dots are clicked.

```{r}
exam_data$onclick <- sprintf("window.open(\"%s%s\")",
                             "https://www.moe.gov.sg/schoolfinder?journey=Primary%20school", as.character(exam_data$ID))

exam_data$tooltip <- c(
  "We are going somewhere interesting :)"
)

p <- ggplot(data = exam_data,
            aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(onclick = onclick,
        tooltip = tooltip),
    stackgroups = TRUE,
    binwidth = 1,
    method = "histodot"
  ) +
  scale_y_continuous(NULL,
                     breaks = NULL)
girafe(
  ggobj = p ,
  width_svg = 6,
  height_svg = 6*0.618
)
```

### Connected Multiple view with ggiraph

we will combine the usage of ggiraph and patchwork to create coordinated multple views of interactive graphs. the graph will highlight the same student at the other graph when the mouse is hovered at one of the graph

```{r}
p1 <- ggplot(data = exam_data,
             aes(x = MATHS)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = 'histodot'
  ) +
  coord_cartesian(xlim = c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

p2 <- ggplot(data = exam_data,
             aes(x = ENGLISH)) +
  geom_dotplot_interactive(
    aes(data_id = ID),
    stackgroups = TRUE,
    binwidth = 1,
    method = 'histodot'
  ) +
  coord_cartesian(xlim = c(0,100)) +
  scale_y_continuous(NULL,
                     breaks = NULL)

girafe(
  code = print(p1 + p2),
  width_svg = 6,
  height_svg = 3,
  options = list(
    opts_hover(css = "fill: #000000;"),
    opts_hover_inv(css = "opacity:0.2;")
  )
)
```

## Interactive data visualisation - plotly methods

the other way to create interactive map is to use plotly. this package work by using the plotly.js interface of javascript library.

there is two way to use plotly in r, they are:

-   `plot_ly()`

-   `ggplotly()`

### plot_ly() graph

a simple plotly plot where you could get x and y coordinate of the dot when hovered

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH)
```

### plot_ly(): visual variable

the same plot as before with additional visual color

```{r}
plot_ly(data = exam_data,
        x = ~MATHS,
        y = ~ENGLISH,
        color = ~RACE)
```

### ggplotly() method

creating the ggplot as usual then make it interactive using ggplotly

```{r}
p <- ggplot(data = exam_data,
            aes(x = MATHS,
                y = ENGLISH)) +
  geom_point(size = 1) +
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100))

ggplotly(p)
```

### coordinated multiple view with plotly()

-   `highlight_key()`: shared data

-   `subplot()`: to plot multiple graph side by side

-   click on one of the dot to trigger the interactivity

```{r}
d <- highlight_key(exam_data)
p1 <- ggplot(data=d,
             aes(x = MATHS,
                 y = ENGLISH)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) 

p2 <- ggplot(data=d,
             aes(x = MATHS,
                 y = SCIENCE)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) 

subplot(ggplotly(p1),
        ggplotly(p2))
```

## Interactive data visualisation - crosstalk methods

crosstalk is an add-on to the htmlwidgets package.

### DT package

-   a wrapper or interface toward DataTables library of javascript

-   data objects in R can be rendered as HTML tables using the library

```{r}
DT::datatable(exam_data, class = "compact")
```

### Linked brushing: crosstalk method

-   *highlight()* is a function of **plotly** package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.

-   *bscols()* is a helper function of **crosstalk** package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. **Warning:** This will bring in all of Bootstrap!.

```{r}
d <- highlight_key(exam_data)
p <- ggplot(data=d,
             aes(x = MATHS,
                 y = ENGLISH)) + 
  geom_point(size = 1) + 
  coord_cartesian(xlim = c(0,100),
                  ylim = c(0,100)) 
gg <- highlight(ggplotly(p),
                "plotly_selected")

crosstalk::bscols(gg,
                  DT::datatable(d),
                  widths = 5)
```

## Reference

### **ggiraph**

This [link](https://davidgohel.github.io/ggiraph/) provides online version of the reference guide and several useful articles. Use this [link](https://cran.r-project.org/web/packages/ggiraph/ggiraph.pdf) to download the pdf version of the reference guide.

-   [How to Plot With Ggiraph](https://www.r-bloggers.com/2018/04/how-to-plot-with-ggiraph/)

-   [Interactive map of France with ggiraph](http://rstudio-pubs-static.s3.amazonaws.com/152833_56a4917734204de7b37881d164cf8051.html)

-   [Custom interactive sunbursts with ggplot in R](https://www.pipinghotdata.com/posts/2021-06-01-custom-interactive-sunbursts-with-ggplot-in-r/)

-   This [link](https://github.com/d-qn/2016_08_02_rioOlympicsAthletes) provides code example on how ggiraph is used to interactive graphs for [Swiss Olympians - the solo specialists](https://www.swissinfo.ch/eng/rio-2016-_swiss-olympiansthe-solo-specialists-/42349156?utm_content=bufferd148b&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer).

### **plotly for R**

-   [Getting Started with Plotly in R](https://plotly.com/r/getting-started/)

-   A collection of plotly R graphs are available via this [link](https://plotly.com/r/).

-   Carson Sievert (2020) **Interactive web-based data visualization with R, plotly, and shiny**, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this [link](https://plotly-r.com/)

-   [Plotly R Figure Reference](https://plotly.com/r/reference/index/) provides a comprehensive discussion of each visual representations.

-   [Plotly R Library Fundamentals](https://plotly.com/r/plotly-fundamentals/) is a good place to learn the fundamental features of Plotly's R API.

-   [Getting Started](https://gganimate.com/articles/gganimate.html)

-   Visit this [link](https://rpubs.com/raymondteo/dataviz8) for a very interesting implementation of gganimate by your senior.

-   [Building an animation step-by-step with gganimate](https://www.alexcookson.com/post/2020-10-18-building-an-animation-step-by-step-with-gganimate/).

-   [Creating a composite gif with multiple gganimate panels](https://solarchemist.se/2021/08/02/composite-gif-gganimate/)
