{
  "hash": "14edac0b451d25ee9963560270482e59",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on_Ex5b: Visual Correlation Analysis\"\ndate: \"4 February 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\neditor: visual\n---\n\n\n## Overview\n\nCorrelation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\n\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\n\nThere are three broad reasons for computing a correlation matrix.\n\n-   To reveal the relationship between high-dimensional variables pair-wisely.\n\n-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\n\n-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression's estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\n-   Rendering the value of a correlation to depict its sign and magnitude, and\n\n-   Reordering the variables in a correlation matrix so that \"similar\" variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using [*pairs()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) of R Graphics. Next, you will learn how to plot corrgram using **corrplot** package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R.\n\n## Getting Started\n\n### Importing and downloading packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nred <- read_csv(\"data/winequality-red.csv\")\nred[\"type\"] = \"red\"\nwhite <- read_csv(\"data/winequality-white.csv\")\nwhite[\"type\"] = \"white\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nwine <- rbind(red,white)\nwrite_csv(wine, \"data/wine_quality.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwine <- read_csv(\"data/wine_quality.csv\")\n```\n:::\n\n\n## Pairs Method\n\n### Basic Correlation\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,1:11])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### Drawing the lower corner\n\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], upper.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npairs(wine[,2:12], lower.panel = NULL)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Coefficient Correlation\n\nplotting the correlation scatter plot on lower side and plotting the correlation value on the upper side\n\n\n::: {.cell}\n\n```{.r .cell-code}\npanel.cor <- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr <- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr <- abs(cor(x, y, use=\"complete.obs\"))\ntxt <- format(c(r, 0.123456789), digits=digits)[1]\ntxt <- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## ggcorrmat method\n\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\n\nThe are at least three R packages provide function to plot corrgram, they are:\n\n-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)\n\n-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)\n\n-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\n\nIn this section, you will learn how to visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/)package.\n\n### Basic matrix\n\nOn of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it's ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p < 0.05\"\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))\n```\n:::\n\n\n## multiple correlation plot\n\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Corrplot method\n\nBefore we can plot a corrgram using *corrplot()*, we need to compute the correlation matrix of wine data frame.\n\nIn the code chunk below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.cor <- cor(wine[, 1:11])\n```\n:::\n\n\nNext, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### geometry of corrplot\n\navailable geometry: circle, square, ellipse, number, shade, color and pie\n\nusing square\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"square\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\nusing ellipse\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\") \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n### layout of corrplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n### mixed layout\n\nnumber - square\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"number\", \n               upper = \"square\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\nellipse - number\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n### correlation with significant test\n\nWith corrplot package, we can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n```\n:::\n\n\nWe can then use the *p.mat* argument of *corrplot* function as shown in the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n### reordering\n\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. \\\"original\\\"). The default setting can be over-write by using the *order* argument of *corrplot()*. Currently, **corrplot**package support four sorting methods, they are:\n\n-   \\\"AOE\\\" is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n\n-   \\\"FPC\\\" for the first principal component order.\n\n-   \\\"hclust\\\" for hierarchical clustering order, and \\\"hclust.method\\\" for the agglomeration method to be used.\n\n    -   \\\"hclust.method\\\" should be one of \\\"ward\\\", \\\"single\\\", \\\"complete\\\", \\\"average\\\", \\\"mcquitty\\\", \\\"median\\\" or \\\"centroid\\\".\n\n-   \\\"alphabet\\\" for alphabetical order.\n\n\\\"AOE\\\", \\\"FPC\\\", \\\"hclust\\\", \\\"alphabet\\\". More algorithms can be found in **seriation** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n### clustering reordering\n\nIf using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex5b_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n## \n",
    "supporting": [
      "Hands-on_Ex5b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}