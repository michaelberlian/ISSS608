{
  "hash": "6068bb37d338510061772fb93d8d4ffc",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 7c: Anlytical Mapping\"\nauthor: \"Michael Berlian\"\ndate: \"29 February 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\neditor: visual\n---\n\n\n## Overview\n\n### Objectives\n\nIn this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n### Learning outcome\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\n-   Importing geospatial data in rds format into R environment.\n\n-   Creating cartographic quality choropleth maps by using appropriate tmap functions.\n\n-   Creating rate map\n\n-   Creating percentile map\n\n-   Creating boxmap\n\n## Getting Started\n\n### Importing packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n### Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- read_rds('data/rds/NGA_wp.rds')\n```\n:::\n\n\n## Basing Choropleth Mapping\n\n### Visualising distribution of non functional water point\n\n\n::: {.cell}\n\n```{.r .cell-code}\np_nonf <-tm_shape(NGA_wp)+\n  tm_fill(\"wp_nonfunctional\", \n          n = 10,\n          style = \"equal\", \n          palette = \"Blues\",\n          title = \"wp_nonfunctional\") +\n  tm_layout(main.title = \"Distribution of non functional water point by LGAs\",\n            legend.outside = FALSE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1)\n\np_nonf\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7c_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np1 <- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\np2 <- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water point by LGAs\",\n            legend.outside = FALSE)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_arrange(p2, p1, nrow = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7c_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Choropleth map for rates\n\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\n### Deriving pct of functional and non functional water point per total water point\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  mutate(pct_functional = wp_functional/total_wp) %>%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n```\n:::\n\n\n### plotting map of rate\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"rate map of functional water point by LGAs\",\n            legend.outside = FALSE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7c_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Extreme values maps\n\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\n### Percentile map\n\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\n#### data preparation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nNGA_wp <- NGA_wp %>%\n  drop_na()\n```\n:::\n\n\nfinding out values of each percentile\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercent <- c(0,.01,.1,.5,.9,.99,1)\nvar <- NGA_wp[\"pct_functional\"] %>%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n```\n\n\n:::\n:::\n\n\n#### Benefits of writing function\n\nWriting a function has three big advantages over using copy-and-paste:\n\n-   You can give a function an evocative name that makes your code easier to understand.\n\n-   As requirements change, you only need to update code in one place, instead of many.\n\n-   You eliminate the chance of making incidental mistakes when you copy and paste (i.e.Â updating a variable name in one place, but not in another).\n\n#### Creating get.var function\n\n-   arguments:\n\n    -   vname: variable name (as character, in quotes)\n\n    -   df: name of sf data frame\n\n-   returns:\n\n    -   v: vector with values (without a column name)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% \n    st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n\n#### percentile mapping function\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap <- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent <- c(0,.01,.1,.5,.9,.99,1)\n  var <- get.var(vnam, df)\n  bperc <- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"< 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"> 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n```\n:::\n\n\n#### testing the percentile mapping function\n\n\n::: {.cell}\n\n```{.r .cell-code}\npercentmap(\"total_wp\", NGA_wp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7c_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### Box map\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7c_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n-   Displaying summary statistics on a choropleth map by using the basic principles of boxplot.\n\n-   To create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n#### boxbreaks function\n\n-   arguments:\n\n    -   v: vector with observations\n\n    -   mult: multiplier for IQR (default 1.5)\n\n-   returns:\n\n    -   bb: vector with 7 break points compute quartile and fences\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxbreaks <- function(v,mult=1.5) {\n  qv <- unname(quantile(v))\n  iqr <- qv[4] - qv[2]\n  upfence <- qv[4] + mult * iqr\n  lofence <- qv[2] - mult * iqr\n  # initialize break points vector\n  bb <- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence < qv[1]) {  # no lower outliers\n    bb[1] <- lofence\n    bb[2] <- floor(qv[1])\n  } else {\n    bb[2] <- lofence\n    bb[1] <- qv[1]\n  }\n  if (upfence > qv[5]) { # no upper outliers\n    bb[7] <- upfence\n    bb[6] <- ceiling(qv[5])\n  } else {\n    bb[6] <- upfence\n    bb[7] <- qv[5]\n  }\n  bb[3:5] <- qv[2:4]\n  return(bb)\n}\n```\n:::\n\n\n#### get.var function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget.var <- function(vname,df) {\n  v <- df[vname] %>% st_set_geometry(NULL)\n  v <- unname(v[,1])\n  return(v)\n}\n```\n:::\n\n\n#### testing the box break function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvar <- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n```\n\n\n:::\n:::\n\n\n#### boxmap function\n\n\n::: {.cell}\n\n```{.r .cell-code}\nboxmap <- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var <- get.var(vnam,df)\n  bb <- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"< 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"> 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex7c_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Hands-on_Ex7c_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}