[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "",
    "text": "In this hands on exercise, we will go through the ggplot packages of R and apply the the principle of Layered Grammar of Graphic."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#install-and-import-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#install-and-import-r-packages",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Install and Import R packages",
    "text": "Install and Import R packages\nThe code chunk below use the p_load function of pacman packages to check if tidyverse packages is installed in the computer. If they are, then they will be imported to R.\n\npacman::p_load(tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#importing-data",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Importing Data",
    "text": "Importing Data\n\nexam_data &lt;- read_csv('data/Exam_data.csv')\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#r-graphic-vs-ggplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#r-graphic-vs-ggplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "R Graphic vs ggplot",
    "text": "R Graphic vs ggplot\n\nR Graphicggplot\n\n\n\nhist(exam_data$MATHS)\n\n\n\n\n\n\n\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill=\"grey\") +\n  ggtitle(\"Distribution of Maths scores\")\n\n\n\n\n\n\n\nfrom the comparison above can be seen that even though R Graphic codes are simpler, the ggplot has more room for flexibility.\nAlso, Pointed out by Hadley Wickham\n“The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.”"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_bar",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_bar",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_bar",
    "text": "Geometric Objects: geom_bar\ngeom_bar utilised to plot bar chart\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_dotplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_dotplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_dotplot",
    "text": "Geometric Objects: geom_dotplot\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n\nBin width defaults to 1/30 of the range of the data. Pick better value with\n`binwidth`.\n\n\n\n\n\ndotplot is used to plot dots. Each dot represent a single observation. However, the y-axis is showing something else which is wrong. Therefore, we can turned off or remove the y-axis using the scale_y_continuous.\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5) +      \n  scale_y_continuous(NULL,           \n                     breaks = NULL)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_histogram",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_histogram",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_histogram()",
    "text": "Geometric Objects: geom_histogram()\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\n\n\n\ngeom histogram is to plot histogram with default bin of 30"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-geom",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-geom",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Modifying a geometric object by changing geom()",
    "text": "Modifying a geometric object by changing geom()\nchange the bin number to 20, with black outline and light blue filling\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,\n                 color=\"black\",      \n                 fill=\"light blue\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-aes",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#modifying-a-geometric-object-by-changing-aes",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Modifying a geometric object by changing aes()",
    "text": "Modifying a geometric object by changing aes()\nusing fill of aes to indicate subgroup\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom-density",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom-density",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom-density()",
    "text": "Geometric Objects: geom-density()\nplot the kernel density plot, smoothed histogram\n\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n\n\n\n\nseparate the gender group using colour aes\n\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_boxplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_boxplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_boxplot",
    "text": "Geometric Objects: geom_boxplot\ncreating box plot to show the median, two hinges and two whiskers, and all “outlying” points individually.\n\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n\n\n\n\nNotches are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_violin",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_violin",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_violin",
    "text": "Geometric Objects: geom_violin\nviolin is to visualised if two different plot or data has similar distribution\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_point",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geometric-objects-geom_point",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Geometric Objects: geom_point()",
    "text": "Geometric Objects: geom_point()\ngeom_point used to show the scatterplot. In below example, its a scatterplot between Math and English subject.\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-objects-can-be-combined",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#geom-objects-can-be-combined",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "geom objects can be combined",
    "text": "geom objects can be combined\nmultiple geoms can be drawn into the same graphic\n\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with stat()",
    "text": "Working with stat()\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n\n\n\n\nthe bar above can be added with some more stats such as mean"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-stat_summary-method",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-stat_summary-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with stat - the stat_summary() method",
    "text": "Working with stat - the stat_summary() method\nadding mean point to the box plot, stat_summary method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=4)               \n\nWarning: The `fun.y` argument of `stat_summary()` is deprecated as of ggplot2 3.3.0.\nℹ Please use the `fun` argument instead."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-geom-method",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-stat---the-geom-method",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with stat - the geom() method",
    "text": "Working with stat - the geom() method\nadding mean point to the box plot, geom method\n\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"red\",          \n             size=4)          \n\nWarning in geom_point(stat = \"summary\", fun.y = \"mean\", colour = \"red\", :\nIgnoring unknown parameters: `fun.y`\n\n\nNo summary function supplied, defaulting to `mean_se()`"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#adding-a-best-fit-curve-on-a-scatterplot",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#adding-a-best-fit-curve-on-a-scatterplot",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Adding a best fit curve on a scatterplot?",
    "text": "Adding a best fit curve on a scatterplot?\ngeom_smooth used to add fit line to the scatter plot\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nthe default method of geom smooth is loess, below is how to set to other method of fit line\n\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facet_wrap",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-facet_wrap",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with facet_wrap()",
    "text": "Working with facet_wrap()\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_grid-function",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#facet_grid-function",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "facet_grid() function",
    "text": "facet_grid() function\n\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinate",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-coordinate",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with Coordinate",
    "text": "Working with Coordinate\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n\n\n\n\nthe default bar chart is vertical, we could change it to horizontal using the code below.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#changing-the-y--and-x-axis-range",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#changing-the-y--and-x-axis-range",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Changing the y- and x-axis range",
    "text": "Changing the y- and x-axis range\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\nwe can fixed and set the x and y axis to give better view and reduce misinterpretation\n\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\n`geom_smooth()` using formula = 'y ~ x'"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-theme",
    "href": "Hands-on_Ex/Hands-on_Ex1/Hands-on_Ex1.html#working-with-theme",
    "title": "Hands-on Exercise 1: A Layered Grammar of Graphics: ggplot2 methods",
    "section": "Working with theme",
    "text": "Working with theme\nwe can choose theme to fit our needs.\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n\n\n\n\n\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this hands on exercise, several ggplot2 extensions will be tried to create more elegant and effective graphics.\n\ncontrol the placement of texts on graph utilising ggrepel package\ncreate professional publication quality figure utilising ggthemes and hrbrthemes package\nplot composite figure utilising ggplot2 and patchwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#overview",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "",
    "text": "In this hands on exercise, several ggplot2 extensions will be tried to create more elegant and effective graphics.\n\ncontrol the placement of texts on graph utilising ggrepel package\ncreate professional publication quality figure utilising ggthemes and hrbrthemes package\nplot composite figure utilising ggplot2 and patchwork package"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#getting-started",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Getting started",
    "text": "Getting started\n\nImporting the required libraries\nthere are 4 new libraries that are going to be utilised in this hands on. They are:\n\nggrepel: to repel overlapping text\nggthemes: to provide wider themes, geoms, and scales for ggplot2\nhrbrthemes: to provide typography-centric themes and theme componens for ggplot2\npatchwork: to combine figures\n\n\npacman::p_load(ggrepel, patchwork, ggthemes, hrbrthemes, tidyverse)\n\n\n\nImporting the data\nthe data that will be used in this hands-on is exam data\n\nexam_data &lt;- read_csv(\"data/Exam_data.csv\")\n\npreview 5 row of the exam data\n\nhead(exam_data,5)\n\n# A tibble: 5 × 7\n  ID         CLASS GENDER RACE    ENGLISH MATHS SCIENCE\n  &lt;chr&gt;      &lt;chr&gt; &lt;chr&gt;  &lt;chr&gt;     &lt;dbl&gt; &lt;dbl&gt;   &lt;dbl&gt;\n1 Student321 3I    Male   Malay        21     9      15\n2 Student305 3I    Female Malay        24    22      16\n3 Student289 3H    Male   Chinese      26    16      16\n4 Student227 3F    Male   Chinese      27    77      31\n5 Student318 3I    Male   Malay        27    11      25"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-ggplot2-annotation-ggrepel",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-ggplot2-annotation-ggrepel",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 annotation: ggrepel",
    "text": "Beyond ggplot2 annotation: ggrepel\nFirst, we look on the plot without using the ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label(aes(label=ID),\n             hjust = .5,\n             vjust = -.5) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100)) +\n  ggtitle(\"English scores versus Maths scores\")\n\n\n\n\nThere are too much annotation that you cannot see anything anymore\n\nworking with ggrepel\n\nThe plotThe code\n\n\n\n\n\n\n\n\n\n\nggplot(data=exam_data,\n       aes(x = MATHS,\n           y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  geom_label_repel(aes(label = ID),\n                   fontface = \"bold\") +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Math schores for Primary 3\")\n\n\n\n\nnow the annotation are not overlapping and only shown when possible"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-ggplot2-themes",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-ggplot2-themes",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Beyond ggplot2 themes",
    "text": "Beyond ggplot2 themes\nthere are some built in themes from ggplot such as theme_gray(), theme_bw(), theme_minimal() and some more.\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = \"grey25\",\n                 fill = \"grey90\") +\n  theme_gray() +\n  ggtitle(\"Distribution of Math scores\")\n\n\n\n\n\nggtheme\nggtheme is part of ggplot. However, it is open for extension therefore there are more ggplot that created by communities, theme_economist() is one of the example of theme created by others\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = 'grey25',\n                 fill = 'grey90') +\n  ggtitle('Distribution of Math scores') +\n  theme_economist()\n\n\n\n\n\n\nhrbrthemes\nhrbrthemes are more focused on the typography instead of the overall beauty\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = 'grey25',\n                 fill = 'grey90') +\n  ggtitle('Distribution of Math scores') +\n  theme_ipsum()\n\n\n\n\n\nggplot(data = exam_data,\n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,\n                 boundary = 100,\n                 color = 'grey25',\n                 fill = 'grey90') +\n  ggtitle('Distribution of Math scores') +\n  theme_ipsum(axis_title_size = 18,\n              base_size = 15,\n              grid = \"Y\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-single-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#beyond-single-graphs",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Beyond Single Graphs",
    "text": "Beyond Single Graphs\nsometimes plotting a single graph give minimum information. therefore, it is common to plot more than 1 graphic at the same time. this is to increase the amount of information and understanding extracted from the plots.\n\np1 &lt;- ggplot(data = exam_data, \n             aes(x = MATHS)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") + \n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of Math scores\")\n\np1\n\n\n\n\n\np2 &lt;- ggplot(data = exam_data, \n             aes(x = ENGLISH)) +\n  geom_histogram(bins = 20, \n                 boundary = 100,\n                 color = \"grey25\", \n                 fill = \"grey90\") +\n  coord_cartesian(xlim = c(0,100)) +\n  ggtitle(\"Distribution of English scores\")\n\np2\n\n\n\n\n\np3 &lt;- ggplot(data = exam_data, \n             aes(x = MATHS,\n                 y = ENGLISH)) +\n  geom_point() +\n  geom_smooth(method = lm,\n              size = 0.5) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) +\n  ggtitle(\"English scores versus Math scores for Primary 3\")\n\np3\n\n\n\n\nhere are 3 graphs plotted one after another. this way of plotting makes it hard to compare between them\n\nCreating Composite Graphics: patchwork methods\npatchwork is an extension of ggplot2\n\n+ or | is used to create new column layout\n() is used for subplots\n/ is used for new row layout\n\n\n\n2 Plots\n\ncolumnrow\n\n\n\np1 + p2\n\n\n\n\n\n\n\np1 / p2\n\n\n\n\n\n\n\n\n\n3 Plots\n\ncolumnrowcombination\n\n\n\np1 + p2 + p3\n\n\n\n\n\n\n\np1 / p2 / p3\n\n\n\n\n\n\nuse “|” instead of “+” to use combination\n\n(p1/p2)|(p3)\n\n\n\n\n\n\n\n\n\nannotation(tag)\n\n((p1/p2)|p3) +\n  plot_annotation(tag_levels='I')\n\n\n\n\n\n\nplot inside of plot\n\np3 + inset_element(p2, \n                   left = 0.02, \n                   bottom = 0.7, \n                   right = 0.5, \n                   top = 1)\n\n\n\n\n\n\npatchwork + ggthemes\n\npatchwork &lt;- (p1 / p2) | p3\npatchwork & theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex2/Hands-on_Ex2.html#reference",
    "title": "Hands-on Exercise 2: Beyond ggplot2 Fundamentals",
    "section": "Reference",
    "text": "Reference\n\nPatchwork R package goes nerd viral\nggrepel\nggthemes\nhrbrthemes\nggplot tips: Arranging plots\nggplot2 Theme Elements Demonstration\nggplot2 Theme Elements Reference Sheet"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "in this hands on exercise, I will explore the functions of ggiraph and plotlyr packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#prologue",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#prologue",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "",
    "text": "in this hands on exercise, I will explore the functions of ggiraph and plotlyr packages"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#getting-started",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Getting started",
    "text": "Getting started\nwe are going to utilise several packages in this hands on exercise, they are:\n\nggiraph: to create intractivity in ggplot graphics\nplotly: to plot interactive graphs\nDT: to create interactive table for HTML pages (interface to the java script DataTables library)\ntidyverse: R packages to support data science, analysis, and creating statistical graphs\npatchwork: to combine multiple graphs into single figures\n\n\npacman::p_load(ggiraph, plotly, patchwork, DT, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#importing-data",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Importing data",
    "text": "Importing data\nfor this hands on exercise, we are going to import Exam_data.csv using the read_csv() from readr packages.\n\nexam_data &lt;- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-visualisation---ggiraph-methods",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-visualisation---ggiraph-methods",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Interactive data visualisation - ggiraph methods",
    "text": "Interactive data visualisation - ggiraph methods\nggiraph is an extension of ggplot2 to create interactive ggplot graphics.\nthere are 3 arguments to be used from ggiraph toward ggplot geometries, they are:\n\nTooltip: is to display data when mouse is hovering the elements\nOnclick: give action when the element is clicked\nData_id: containing the id to be associated with the elements\n\n\nTooltip 1\nthe example below consists of 2 part. the first part is where the graph is created and the next one girafe() is to create an interactive svg object. the plot below will show the information of the element when mouse hover on it.\n\np &lt;- ggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE, \n    binwidth = 1, \n    method = \"histodot\") +\n  scale_y_continuous(NULL, \n                     breaks = NULL)\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nTooltip 2\nthe codechunk below preview on how to create tooltips with multiple information on the elements\n\nexam_data$tooltip &lt;- c(paste0(\n  \"Name = \", exam_data$ID,\n  \"\\n Class = \", exam_data$CLASS\n))\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = exam_data$tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 8,\n  height_svg = 8*0.618\n)\n\n\n\n\n\n\n\nCustomising tooltip\n\ntooltip_css &lt;- \"background-color:white;\n                font-style:bold;\n                color:black;\"\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(tooltip = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_tooltip(\n      css = tooltip_css\n    )\n  )\n)\n\n\n\n\n\n\n\nStatistic tooltip\nbelow is way to create interactive graph with statistical tooltip to the elements. we are going to plot the average of math score of each race with 90% confidence interval\n\ntooltip &lt;- function(y, ymax, accuracy = .01) {\n  mean &lt;- scales::number(y, accuracy = accuracy)\n  sem &lt;- scales::number(ymax - y, accuracy = accuracy)\n  paste(\"mean maths scores:\", mean, \"+/-\", sem)\n}\n\ngg_point &lt;- ggplot(data = exam_data,\n                   aes(x=RACE)) +\n  stat_summary(aes(y = MATHS,\n                   tooltip = after_stat(\n                     tooltip(y, ymax)\n                   )),\n               fun.data = \"mean_se\",\n               geom = GeomInteractiveCol,\n               fill = \"light blue\") +\n  stat_summary(aes(y = MATHS),\n               fun.data = mean_se,\n               geom = 'errorbar',\n               width = 0.2,\n               size = 0.2) \n\ngirafe(\n  ggobj = gg_point,\n  width_svg = 8,\n  height_svg =  8*0.618\n)\n\n\n\n\n\n\n\nHover effect\nhere we are going to try highlighting effect on hover. we are going to fill the same class and inverse (greyed) the rest\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) + \n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #000000;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nTooltip and hover\nwe are going to combine the tooltip element and the hover effect together. greyed out the one thats not in the same class and label the dots with the class it belongs to\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = CLASS,\n        tooltip = CLASS),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) + \n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618,\n  options = list(\n    opts_hover(css = \"fill: #000000;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)\n\n\n\n\n\n\n\nOnclick\nhere is the example of on click. we are going to open a new tab of of moe website when one of the dots are clicked.\n\nexam_data$onclick &lt;- sprintf(\"window.open(\\\"%s%s\\\")\",\n                             \"https://www.moe.gov.sg/schoolfinder?journey=Primary%20school\", as.character(exam_data$ID))\n\nexam_data$tooltip &lt;- c(\n  \"We are going somewhere interesting :)\"\n)\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(onclick = onclick,\n        tooltip = tooltip),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = \"histodot\"\n  ) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\ngirafe(\n  ggobj = p ,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nConnected Multiple view with ggiraph\nwe will combine the usage of ggiraph and patchwork to create coordinated multple views of interactive graphs. the graph will highlight the same student at the other graph when the mouse is hovered at one of the graph\n\np1 &lt;- ggplot(data = exam_data,\n             aes(x = MATHS)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\np2 &lt;- ggplot(data = exam_data,\n             aes(x = ENGLISH)) +\n  geom_dotplot_interactive(\n    aes(data_id = ID),\n    stackgroups = TRUE,\n    binwidth = 1,\n    method = 'histodot'\n  ) +\n  coord_cartesian(xlim = c(0,100)) +\n  scale_y_continuous(NULL,\n                     breaks = NULL)\n\ngirafe(\n  code = print(p1 + p2),\n  width_svg = 6,\n  height_svg = 3,\n  options = list(\n    opts_hover(css = \"fill: #000000;\"),\n    opts_hover_inv(css = \"opacity:0.2;\")\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-visualisation---plotly-methods",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-visualisation---plotly-methods",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Interactive data visualisation - plotly methods",
    "text": "Interactive data visualisation - plotly methods\nthe other way to create interactive map is to use plotly. this package work by using the plotly.js interface of javascript library.\nthere is two way to use plotly in r, they are:\n\nplot_ly()\nggplotly()\n\n\nplot_ly() graph\na simple plotly plot where you could get x and y coordinate of the dot when hovered\n\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH)\n\n\n\n\n\n\n\nplot_ly(): visual variable\nthe same plot as before with additional visual color\n\nplot_ly(data = exam_data,\n        x = ~MATHS,\n        y = ~ENGLISH,\n        color = ~RACE)\n\n\n\n\n\n\n\nggplotly() method\ncreating the ggplot as usual then make it interactive using ggplotly\n\np &lt;- ggplot(data = exam_data,\n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(size = 1) +\n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100))\n\nggplotly(p)\n\n\n\n\n\n\n\ncoordinated multiple view with plotly()\n\nhighlight_key(): shared data\nsubplot(): to plot multiple graph side by side\nclick on one of the dot to trigger the interactivity\n\n\nd &lt;- highlight_key(exam_data)\np1 &lt;- ggplot(data=d,\n             aes(x = MATHS,\n                 y = ENGLISH)) + \n  geom_point(size = 1) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) \n\np2 &lt;- ggplot(data=d,\n             aes(x = MATHS,\n                 y = SCIENCE)) + \n  geom_point(size = 1) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) \n\nsubplot(ggplotly(p1),\n        ggplotly(p2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-visualisation---crosstalk-methods",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#interactive-data-visualisation---crosstalk-methods",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Interactive data visualisation - crosstalk methods",
    "text": "Interactive data visualisation - crosstalk methods\ncrosstalk is an add-on to the htmlwidgets package.\n\nDT package\n\na wrapper or interface toward DataTables library of javascript\ndata objects in R can be rendered as HTML tables using the library\n\n\nDT::datatable(exam_data, class = \"compact\")\n\n\n\n\n\n\n\nLinked brushing: crosstalk method\n\nhighlight() is a function of plotly package. It sets a variety of options for brushing (i.e., highlighting) multiple plots. These options are primarily designed for linking multiple plotly graphs, and may not behave as expected when linking plotly to another htmlwidget package via crosstalk. In some cases, other htmlwidgets will respect these options, such as persistent selection in leaflet.\nbscols() is a helper function of crosstalk package. It makes it easy to put HTML elements side by side. It can be called directly from the console but is especially designed to work in an R Markdown document. Warning: This will bring in all of Bootstrap!.\n\n\nd &lt;- highlight_key(exam_data)\np &lt;- ggplot(data=d,\n             aes(x = MATHS,\n                 y = ENGLISH)) + \n  geom_point(size = 1) + \n  coord_cartesian(xlim = c(0,100),\n                  ylim = c(0,100)) \ngg &lt;- highlight(ggplotly(p),\n                \"plotly_selected\")\n\ncrosstalk::bscols(gg,\n                  DT::datatable(d),\n                  widths = 5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3a.html#reference",
    "title": "Hands-on Exercise 3a: Programming Interactive Data Visualisation with R",
    "section": "Reference",
    "text": "Reference\n\nggiraph\nThis link provides online version of the reference guide and several useful articles. Use this link to download the pdf version of the reference guide.\n\nHow to Plot With Ggiraph\nInteractive map of France with ggiraph\nCustom interactive sunbursts with ggplot in R\nThis link provides code example on how ggiraph is used to interactive graphs for Swiss Olympians - the solo specialists.\n\n\n\nplotly for R\n\nGetting Started with Plotly in R\nA collection of plotly R graphs are available via this link.\nCarson Sievert (2020) Interactive web-based data visualization with R, plotly, and shiny, Chapman and Hall/CRC is the best resource to learn plotly for R. The online version is available via this link\nPlotly R Figure Reference provides a comprehensive discussion of each visual representations.\nPlotly R Library Fundamentals is a good place to learn the fundamental features of Plotly’s R API.\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html",
    "title": "Hands-on_Exercise 3b: Programming Animated Statistical Graphic with R",
    "section": "",
    "text": "in this hands on exercise we are going to create an animated graphic. we will utilise gganimate and plotly of r packages.\nwhen creating animations, the plot were not moving, instead there are multiple plot that are appear on each frames. resulting in animation\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#prologue",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#prologue",
    "title": "Hands-on_Exercise 3b: Programming Animated Statistical Graphic with R",
    "section": "",
    "text": "in this hands on exercise we are going to create an animated graphic. we will utilise gganimate and plotly of r packages.\nwhen creating animations, the plot were not moving, instead there are multiple plot that are appear on each frames. resulting in animation\n\nBefore we dive into the steps for creating an animated statistical graph, it’s important to understand some of the key concepts and terminology related to this type of visualization.\n\nFrame: In an animated line graph, each frame represents a different point in time or a different category. When the frame changes, the data points on the graph are updated to reflect the new data.\nAnimation Attributes: The animation attributes are the settings that control how the animation behaves. For example, you can specify the duration of each frame, the easing function used to transition between frames, and whether to start the animation from the current frame or from the beginning."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#getting-started",
    "title": "Hands-on_Exercise 3b: Programming Animated Statistical Graphic with R",
    "section": "Getting started",
    "text": "Getting started\n\nLoading packages\nthere are 5 packages that will be used in this hands on, they are:\n\nplotly, R library for plotting interactive statistical graphs.\ngganimate, an ggplot extension for creating animated statistical graphs.\ngifski converts video frames to GIF animations using pngquant’s fancy features for efficient cross-frame palettes and temporal dithering. It produces animated GIFs that use thousands of colors per frame.\ngapminder: An excerpt of the data available at Gapminder.org. We just want to use its country_colors scheme.\ntidyverse, a family of modern R packages specially designed to support data science, analysis and communication task including creating static statistical graphs.\n\n\npacman::p_load(readxl, gifski, gapminder, plotly, gganimate, tidyverse)\n\n\n\nImporting data\nwe are going to use the Data worksheet from the GlobalPopulation excel workbook.\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_each_(funs(factor(.)), col) %&gt;%\n  mutate(Year = as.integer(Year))\n\nhow ever mutate_each_() is deprecated previously, instead we can use mutate_at()\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate_at(col, as.factor) %&gt;%\n  mutate(Year = as.integer(Year))\n\nthe alternate of mutate_at(), is across()\n\ncol &lt;- c(\"Country\", \"Continent\")\nglobalPop &lt;- read_xls(\"data/GlobalPopulation.xls\",\n                      sheet=\"Data\") %&gt;%\n  mutate(across(col, as.factor)) %&gt;%\n  mutate(Year = as.integer(Year))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#animated-data-visualisation-gganimate-methods",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#animated-data-visualisation-gganimate-methods",
    "title": "Hands-on_Exercise 3b: Programming Animated Statistical Graphic with R",
    "section": "Animated data visualisation: gganimate methods",
    "text": "Animated data visualisation: gganimate methods\ngganimate extends the grammar of graphics as implemented by ggplot2 to include the description of animation. It does this by providing a range of new grammar classes that can be added to the plot object in order to customise how it should change with time.\n\ntransition_*() defines how the data should be spread out and how it relates to itself across time.\nview_*() defines how the positional scales should change along the animation.\nshadow_*() defines how data from other points in time should be presented in the given point in time.\nenter_*()/exit_*() defines how new data should appear and how old data should disappear during the course of the animation.\nease_aes() defines how different aesthetics should be eased during transitions.\n\n\nBuilding a static population bubble plot\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') \n\n\n\n\n\n\nBuilding the animated bubble plot\nIn the code chunk below,\n\ntransition_time() of gganimate is used to create transition through distinct states in time (i.e. Year).\nease_aes() is used to control easing of aesthetics. The default is linear. Other methods are: quadratic, cubic, quartic, quintic, sine, circular, exponential, elastic, back, and bounce.\n\n\nggplot(globalPop, aes(x = Old, y = Young, \n                      size = Population, \n                      colour = Country)) +\n  geom_point(alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(title = 'Year: {frame_time}', \n       x = '% Aged', \n       y = '% Young') +\n  transition_time(Year) +       \n  ease_aes('linear')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#animated-data-visualisation-plotly",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#animated-data-visualisation-plotly",
    "title": "Hands-on_Exercise 3b: Programming Animated Statistical Graphic with R",
    "section": "Animated data visualisation: plotly",
    "text": "Animated data visualisation: plotly\nIn Plotly R package, both ggplotly() and plot_ly() support key frame animations through the frame argument/aesthetic. They also support an idsargument/aesthetic to ensure smooth transitions between objects with the same id (which helps facilitate object constancy).\n\nBuilding an animated bubble plot: ggplotly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using ggplotly() method.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7, \n             show.legend = FALSE) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young')\n\nggplotly(gg)\n\n\n\n\n\nNotice that although show.legend = FALSE argument was used, the legend still appears on the plot. To overcome this problem, theme(legend.position='none') should be used as shown in the plot and code chunk below.\n\ngg &lt;- ggplot(globalPop, \n       aes(x = Old, \n           y = Young, \n           size = Population, \n           colour = Country)) +\n  geom_point(aes(size = Population,\n                 frame = Year),\n             alpha = 0.7) +\n  scale_colour_manual(values = country_colors) +\n  scale_size(range = c(2, 12)) +\n  labs(x = '% Aged', \n       y = '% Young') + \n  theme(legend.position='none')\n\nggplotly(gg)\n\n\n\n\n\n\n\nBuilding an animated bubble plot: plot_ly() method\nIn this sub-section, you will learn how to create an animated bubble plot by using plot_ly() method.\n\nbp &lt;- globalPop %&gt;%\n  plot_ly(x = ~Old, \n          y = ~Young, \n          size = ~Population, \n          color = ~Continent,\n          sizes = c(2, 100),\n          frame = ~Year, \n          text = ~Country, \n          hoverinfo = \"text\",\n          type = 'scatter',\n          mode = 'markers'\n          ) %&gt;%\n  layout(showlegend = FALSE)\nbp"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex3/Hands-on_Ex3b.html#reference",
    "title": "Hands-on_Exercise 3b: Programming Animated Statistical Graphic with R",
    "section": "Reference",
    "text": "Reference\n\nGetting Started\nVisit this link for a very interesting implementation of gganimate by your senior.\nBuilding an animation step-by-step with gganimate.\nCreating a composite gif with multiple gganimate panels"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS608: Visual Analytics and Applications",
    "section": "",
    "text": "Welcome to my ISSS608 Visual Analytics and Applications journey. Follow me through the course!\nnavigate through the navbar on top!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html",
    "title": "DataViz Makeover",
    "section": "",
    "text": "in this take home exercise, I will make over take-home exercise 1 of my classmate. I will try to improve his figures."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#overview",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#overview",
    "title": "DataViz Makeover",
    "section": "",
    "text": "in this take home exercise, I will make over take-home exercise 1 of my classmate. I will try to improve his figures."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#getting-started",
    "title": "DataViz Makeover",
    "section": "Getting started",
    "text": "Getting started\n\nLoading packages\nwe are going to use several packages beforehand.\n\npacman::p_load(tidyverse, haven, patchwork)\n\n\n\nImporting dataset\nwe are going to use the same dataset of student questionnaire, we are going to follow the steps;\n\nImporting the data in sas data type\n\n\nstu_qqq &lt;- read_sas('data/cy08msp_stu_qqq.sas7bdat')\n\n\nFiltering the data to singapore\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nExport the filtered dataset to rds to ease further data importing\n\n\nwrite_rds(stu_qqq_SG, 'data/stu_qqq_SG.rds')\n\n\nRead the exported rds\n\n\nstu_qqq_SG &lt;- read_rds('data/stu_qqq_SG.rds')\n\n\n\nData preparation and wrangling\n\nData preparation\n\nFiltering the columns that will be used for further analysis, in this analysis we are going to take 6 variables, they are:\n\nCNTSCHID = school_id\nST004D01T = gender\nmath = average of 10 math possible values\nscience = average of 10 science possible values\nread = average of 10 reading possible values\nESCS = social economic\n\nRename the columns to a more understandable names\nRecode the answers of questions to a more descriptive measures\nChange the columns data type\n\n\nstu_qqq &lt;- stu_qqq_SG %&gt;%\n  mutate(math = rowMeans(select(stu_qqq_SG,\n         PV1MATH,PV2MATH,PV3MATH,PV4MATH,PV5MATH,PV6MATH,PV7MATH,PV8MATH,PV9MATH,PV10MATH)),\n         science = rowMeans(select(stu_qqq_SG,\n         PV1SCIE,PV2SCIE,PV3SCIE,PV4SCIE,PV5SCIE,PV6SCIE,PV7SCIE,PV8SCIE,PV9SCIE,PV10SCIE)),\n         read = rowMeans(select(stu_qqq_SG,\n         PV1READ,PV2READ,PV3READ,PV4READ,PV5READ,PV6READ,PV7READ,PV8READ,PV9READ,PV10READ))\n         ) %&gt;%\n  select(CNTSCHID,ST004D01T,math,science,read,ESCS) %&gt;%\n  rename(c(school_ID = \"CNTSCHID\", \n           gender = \"ST004D01T\",\n           socio_economic = \"ESCS\")) %&gt;%\n  mutate(gender = recode(gender, \n                         \"1\" = \"Female\", \n                         \"2\" = \"Male\"))\n\nstu_qqq_sch &lt;- stu_qqq %&gt;%\n  group_by(school_ID) %&gt;%\n  summarise(\n    average_math = mean(math),\n    average_read = mean(read),\n    average_scie = mean(science)) %&gt;%\n  unique()\n\nstu_qqq$school_ID &lt;- as.factor(stu_qqq$school_ID)\nstu_qqq$gender &lt;- as.factor(stu_qqq$gender)\n\n\nglimpse(stu_qqq)\n\nRows: 6,606\nColumns: 6\n$ school_ID      &lt;fct&gt; 70200052, 70200134, 70200112, 70200004, 70200152, 70200…\n$ gender         &lt;fct&gt; Female, Male, Male, Male, Female, Female, Male, Male, F…\n$ math           &lt;dbl&gt; 605.2533, 689.9528, 676.7768, 401.0528, 436.1151, 518.1…\n$ science        &lt;dbl&gt; 639.7873, 672.0703, 660.0384, 343.6425, 479.2390, 476.0…\n$ read           &lt;dbl&gt; 667.4296, 627.6078, 582.9252, 361.3969, 475.6763, 431.4…\n$ socio_economic &lt;dbl&gt; 0.1836, 0.8261, -1.0357, -0.9606, 0.0856, 0.1268, -0.01…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#visualisation-makeover",
    "href": "Take-home_Ex/Take-home_Ex2/Take-home_Ex2.html#visualisation-makeover",
    "title": "DataViz Makeover",
    "section": "Visualisation Makeover",
    "text": "Visualisation Makeover\n\n1. Distribution of student’s performance in each subject\n\nthe goal of the above plot is to show the median, mean, and distribution of the student performances across the subjects.\nI believe the plot above can be improved, such as:\n\nthe x axis could be more clearer, instead of putting the subject as a title, the subject can be put before the “score” at x axis (Clarity)\nthe mean line color is very similar as the bar color resulting in blended colour between both, therefore the color could be changed (Aesthetic)\nwe cannot really know the score for the median and mean, adding the score to the label using annotation could give additional information (Clarity)\nthe minimal space of using patchwork got worse since histogram is used, the figure above gives false impression of reading to be more important with a bigger graph than science and math. this might be caused by having 3 vertical histogram side by side would make each graphs too squeezed. I propose to change the orientation of the graph and make them side by side to reduce the inclarity of the graph. (Aesthetic)\n\nSketches :\n\n\nsummary(stu_qqq$math)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  262.6   506.3   582.4   574.0   648.4   842.7 \n\nsummary(stu_qqq$science)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  242.0   498.9   571.2   561.0   629.3   801.9 \n\nsummary(stu_qqq$read)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  158.6   477.4   553.6   542.5   616.1   797.6 \n\n\n\nstat1_mean &lt;- mean(stu_qqq$math)\nstat1_median &lt;- median(stu_qqq$math)\n\nstat2_mean &lt;- mean(stu_qqq$science)\nstat2_median &lt;- median(stu_qqq$science)\n\nstat3_mean &lt;- mean(stu_qqq$read)\nstat3_median &lt;- median(stu_qqq$read)\n\np1 &lt;- ggplot(data = stu_qqq,\n       aes(x = math)) +\n  geom_histogram(binwidth = 50,\n                 color = 'grey75',\n                 fill = 'grey90') +\n  stat_bin(binwidth = 50,\n           geom = \"text\",\n           aes(label=after_stat(count)), \n           vjust = .35,\n           hjust = .75,\n           size = 2.5,\n           color = 'black') +\n  geom_vline(mapping = aes(xintercept=stat1_mean),\n             color = \"red\",\n             linetype = 'dashed') +\n  geom_vline(mapping = aes(xintercept=stat1_median),\n             color = \"blue\",\n             linetype = 'dashed') +\n  annotate(\n    'text',\n    x = stat1_mean - 20,\n    y = 500,\n    label = paste0(\"Mean = \", round(stat1_mean,2)),\n    color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = stat1_median + 20,\n    y = 550,\n    label = paste0(\"Median = \", round(stat1_median,2)),\n    color = \"blue\"\n  ) +\n  scale_x_continuous(\"Math Scores\", limits = c(150,850), breaks = seq(150,850,50)) +\n  scale_y_continuous(\"Frequency\", breaks = seq(0,1300,200)) +\n  theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank()) +\n  coord_flip() \n\np2 &lt;- ggplot(data = stu_qqq,\n       aes(x = science)) +\n  geom_histogram(binwidth = 50,\n                 color = 'grey75',\n                 fill = 'grey90') +\n  stat_bin(binwidth = 50,\n           geom = \"text\",\n           aes(label=after_stat(count)), \n           vjust = .35,\n           hjust = .75,\n           size = 2.5,\n           color = 'black') +\n  geom_vline(mapping = aes(xintercept=stat2_mean),\n             color = \"red\",\n             linetype = 'dashed') +\n  geom_vline(mapping = aes(xintercept=stat2_median),\n             color = \"blue\",\n             linetype = 'dashed') +\n  annotate(\n    'text',\n    x = stat2_mean - 20,\n    y = 500,\n    label = paste0(\"Mean = \", round(stat2_mean,2)),\n    color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = stat2_median + 20,\n    y = 550,\n    label = paste0(\"Median = \", round(stat2_median,2)),\n    color = \"blue\"\n  ) +\n  scale_x_continuous(\"Science Scores\", limits = c(150,850), breaks = seq(150,850,50)) +\n  scale_y_continuous(\"Frequency\", breaks = seq(0,1300,200)) +\n  theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank()) +\n  coord_flip() \n\np3 &lt;- ggplot(data = stu_qqq,\n       aes(x = read)) +\n  geom_histogram(binwidth = 50,\n                 color = 'grey75',\n                 fill = 'grey90') +\n  stat_bin(binwidth = 50,\n           geom = \"text\",\n           aes(label=after_stat(count)), \n           vjust = .35,\n           hjust = .75,\n           size = 2.5,\n           color = 'black') +\n  geom_vline(mapping = aes(xintercept=stat3_mean),\n             color = \"red\",\n             linetype = 'dashed') +\n  geom_vline(mapping = aes(xintercept=stat3_median),\n             color = \"blue\",\n             linetype = 'dashed') +\n  annotate(\n    'text',\n    x = stat3_mean - 20,\n    y = 500,\n    label = paste0(\"Mean = \", round(stat3_mean,2)),\n    color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = stat3_median + 20,\n    y = 550,\n    label = paste0(\"Median = \", round(stat3_median,2)),\n    color = \"blue\"\n  ) +\n  scale_x_continuous(\"Reading Scores\", limits = c(150,850), breaks = seq(150,850,50)) +\n  scale_y_continuous(\"Frequency\", breaks = seq(0,1300,200)) +\n  theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.y = element_blank()) +\n  coord_flip() \n\np1 + p2 + p3 + plot_annotation(\n  title = 'Student\\'s Performance across Subjects ',\n  theme = theme(plot.title = element_text(hjust = 0.5))\n)\n\n\n\n\n\n\n2. Student’s academic performances in relation to gender\n\nthe plot above was used to show the student performance differences between gender across the subject\nthere are ways to improve the plot, such as:\n\ngive different colors toward each subject (Aesthetic)\na clearer and more attractive title (Clarity)\ngiving the error bar on the box plot to give better view (Aesthetic)\ncreate more y tick to ease reading each of the box plot attributes (Clarity)\n\nSketches :\n\n\n\ngendermath &lt;- ggplot(data = stu_qqq,\n       aes(x = gender,\n           y = math)) +\n  stat_boxplot(geom = \"errorbar\", \n               width = 0.25,\n               color = c(\"red\",'blue'))+\n  geom_boxplot(color = c(\"red\",'blue'), fill = c(\"pink\",'lightblue')) +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"darkgreen\",          \n             size = 1) +\n  labs(x = \"Math's Score\") +\n  scale_y_continuous(\"Score\", breaks = seq(150,850,50), limits = c(150,850))+\n    theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n          panel.grid.major = element_line(color = \"grey80\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank())\n\ngenderread &lt;- ggplot(data = stu_qqq,\n       aes(x = gender,\n           y = read)) +\n  stat_boxplot(geom = \"errorbar\", \n               width = 0.25,\n               color = c(\"red\",'blue'))+\n  geom_boxplot(color = c(\"red\",'blue'), fill = c(\"pink\",'lightblue')) +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"darkgreen\",          \n             size = 1) +\n  ylim(150,850) +\n  labs(x = \"Reading's Score\") +\n  scale_y_continuous(NULL,breaks = seq(150,850,50), limits = c(150,850))+\n    theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n          panel.grid.major = element_line(color = \"grey80\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank())\n\ngendersci &lt;- ggplot(data = stu_qqq,\n       aes(x = gender,\n           y = science)) +\n  stat_boxplot(geom = \"errorbar\", \n               width = 0.25,\n               color = c(\"red\",'blue'))+\n  geom_boxplot(color = c(\"red\",'blue'), fill = c(\"pink\",'lightblue')) +\n  geom_point(stat = \"summary\",        \n             fun.y = \"mean\",           \n             colour = \"darkgreen\",          \n             size = 1) +\n  ylim(150,850) +\n  labs(x = \"Science's Score\") +\n  scale_y_continuous(NULL,breaks = seq(150,850,50), limits = c(150,850))+\n    theme(panel.background = element_rect(fill=\"white\",colour=\"white\"),\n          panel.grid.major = element_line(color = \"grey80\"),\n          panel.grid.minor = element_blank(),\n          panel.grid.major.x = element_blank())\n\ngendermath + genderread + gendersci + plot_annotation(\n  title = 'Student\\'s Performance across Subjects between Genders',\n  theme = theme(plot.title = element_text(hjust = 0.5))\n)\n\n\n\n\n\n\n\n3. The comparison of student’s performances between schools\n\nthe plot above was used to show the average student performance of a school\nthere are ways to improve the plot, such as:\n\nClearer title and axis labels (Clarity)\nMore pronounced colour differences between the median line and the histogram (Aesthetic)\nCreate more tick to ease viewing and reduce the axis length (Clarity)\nBigger bin for each histogram to make it more tight (Aesthetic)\nannotate the median value (Clarity)\n\nSketches :\n\n\nsummary(stu_qqq_sch$average_math)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  386.7   530.8   563.7   569.7   591.6   739.8 \n\n\n\nschmath &lt;- ggplot(data = stu_qqq_sch,\n       aes(x = average_math)) +\n  geom_histogram(binwidth=50,\n                 color = \"grey50\",\n                 fill = \"lightblue\") +\n  scale_x_continuous(\"Avg Math Score\", limits = c(350,750), breaks = seq(375,725,50)) +\n  scale_y_continuous(\"No of School\", limits = c(0,70), breaks = seq(0,70,5)) +\n  geom_vline(\n    aes(xintercept = median(average_math)),\n    colour=\"red\", \n    linewidth = 0.8, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = median(stu_qqq_sch$average_math) + 25, \n    y = 65,\n    label = paste0(\"Median = \\n\", round(median(stu_qqq_sch$average_math),2)),\n    color = \"red\",\n    hjust = 0\n  ) +\n  theme(axis.text.x = element_text(size=5),\n        panel.background = element_rect(fill=\"white\",colour=\"white\"),\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\nschscie &lt;- ggplot(data = stu_qqq_sch,\n       aes(x = average_scie)) +\n  geom_histogram(binwidth=50,\n                 color = \"grey50\",\n                 fill = \"lightblue\") +\n  scale_x_continuous(\"Avg Science Score\", limits = c(350,750), breaks = seq(375,725,50)) +\n  scale_y_continuous(NULL, limits = c(0,70), breaks = seq(0,70,5)) +\n  geom_vline(\n    aes(xintercept = median(average_scie)),\n    colour=\"red\", \n    linewidth = 0.8, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = median(stu_qqq_sch$average_scie) + 25, \n    y = 65,\n    label = paste0(\"Median = \\n\", round(median(stu_qqq_sch$average_read),2)),\n    color = \"red\",\n    hjust = 0\n  ) +\n  theme(axis.text.x = element_text(size=5),\n        panel.background = element_rect(fill=\"white\",colour=\"white\"),\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\nschread &lt;- ggplot(data = stu_qqq_sch,\n       aes(x = average_read)) +\n  geom_histogram(binwidth=50,\n                 color = \"grey50\",\n                 fill = \"lightblue\") +\n  scale_x_continuous(\"Avg Reading Score\", limits = c(350,750), breaks = seq(375,725,50)) +\n  scale_y_continuous(NULL, limits = c(0,70), breaks = seq(0,70,5)) +\n  geom_vline(\n    aes(xintercept = median(average_read)),\n    colour=\"red\", \n    linewidth = 0.8, \n    linetype = \"dashed\"\n  ) +\n  annotate(\n    geom = \"text\", \n    x = median(stu_qqq_sch$average_read) + 25, \n    y = 65,\n    label = paste0(\"Median = \\n\", round(median(stu_qqq_sch$average_read),2)),\n    color = \"red\",\n    hjust = 0\n  ) +\n  theme(axis.text.x = element_text(size=5),\n        panel.background = element_rect(fill=\"white\",colour=\"white\"),\n        panel.grid.major = element_line(color = \"grey80\"),\n        panel.grid.minor = element_blank(),\n        panel.grid.major.x = element_blank())\n\nschmath + schscie + schread + plot_annotation(\n  title = 'Average student\\'s Performance across Schools',\n  theme = theme(plot.title = element_text(hjust = 0.5))\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "In this Take home Exercise we are going to explore the data from PISA 2022 database released on 5 December 2022. The dataset is the result of questionnaire filled by the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#prologue",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#prologue",
    "title": "Take-Home Exercise 1",
    "section": "",
    "text": "In this Take home Exercise we are going to explore the data from PISA 2022 database released on 5 December 2022. The dataset is the result of questionnaire filled by the students."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take-Home Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting packages\nIn this take home exercise we are going to utilise several package\n\nTidyverse (to wrangle and plot our data)\nHaven (to read our dataset from sas data type)\nPatchwork (to plot multiple plot in the same figure)\n\n\npacman::p_load(tidyverse, haven, patchwork)\n\n\n\nImporting dataset\nImporting the data in sas data type\n\nstu_qqq &lt;- read_sas('data/cy08msp_stu_qqq.sas7bdat')\n\nFiltering the data to singapore\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\nExport the filtered dataset to rds to ease further data importing\n\nwrite_rds(stu_qqq_SG, 'data/stu_qqq_SG.rds')\n\nRead the exported rds\n\nstu_qqq_SG &lt;- read_rds('data/stu_qqq_SG.rds')"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#data-preparation",
    "title": "Take-Home Exercise 1",
    "section": "Data Preparation",
    "text": "Data Preparation\n\nVariable preparations\n\nFiltering the columns that will be used for further analysis, in this analysis we are going to take 6 variables, they are:\n\nCNTSCHID = school_id\nST004D01T = gender\nmath = average of 10 math possible values\nscience = average of 10 science possible values\nread = average of 10 reading possible values\nESCS = social economic\n\nRename the columns to a more understandable names\nRecode the answers of questions to a more descriptive measures\nChange the columns data type\n\n\nstu_qqq &lt;- stu_qqq_SG %&gt;%\n  mutate(math = rowMeans(select(stu_qqq_SG,\n         PV1MATH,PV2MATH,PV3MATH,PV4MATH,PV5MATH,PV6MATH,PV7MATH,PV8MATH,PV9MATH,PV10MATH)),\n         science = rowMeans(select(stu_qqq_SG,\n         PV1SCIE,PV2SCIE,PV3SCIE,PV4SCIE,PV5SCIE,PV6SCIE,PV7SCIE,PV8SCIE,PV9SCIE,PV10SCIE)),\n         read = rowMeans(select(stu_qqq_SG,\n         PV1READ,PV2READ,PV3READ,PV4READ,PV5READ,PV6READ,PV7READ,PV8READ,PV9READ,PV10READ))\n         ) %&gt;%\n  select(CNTSCHID,ST004D01T,math,science,read,ESCS) %&gt;%\n  rename(c(school_ID = \"CNTSCHID\", \n           gender = \"ST004D01T\",\n           socio_economic = \"ESCS\")) %&gt;%\n  mutate(gender = recode(gender, \n                         \"1\" = \"Female\", \n                         \"2\" = \"Male\"))\n\nstu_qqq$school_ID &lt;- as.factor(stu_qqq$school_ID)\nstu_qqq$gender &lt;- as.factor(stu_qqq$gender)\n\n\n\nOverview\n\nglimpse(stu_qqq)\n\nRows: 6,606\nColumns: 6\n$ school_ID      &lt;fct&gt; 70200052, 70200134, 70200112, 70200004, 70200152, 70200…\n$ gender         &lt;fct&gt; Female, Male, Male, Male, Female, Female, Male, Male, F…\n$ math           &lt;dbl&gt; 605.2533, 689.9528, 676.7768, 401.0528, 436.1151, 518.1…\n$ science        &lt;dbl&gt; 639.7873, 672.0703, 660.0384, 343.6425, 479.2390, 476.0…\n$ read           &lt;dbl&gt; 667.4296, 627.6078, 582.9252, 361.3969, 475.6763, 431.4…\n$ socio_economic &lt;dbl&gt; 0.1836, 0.8261, -1.0357, -0.9606, 0.0856, 0.1268, -0.01…"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#exploratory-data-analysis-eda",
    "title": "Take-Home Exercise 1",
    "section": "Exploratory Data Analysis (EDA)",
    "text": "Exploratory Data Analysis (EDA)\nIn this section 4 analysis will be performed to get insights and uncover truth of factors for singapore student perfomances.\n\n1. Student Performances\nFrom the initial preview, we can see that there are no NA values for all the grades.\n\nstu_qqq_grade &lt;- stu_qqq %&gt;%\n  select (math, science, read)\n\ncolSums(is.na(stu_qqq_grade))\n\n   math science    read \n      0       0       0 \n\n\n\np1 &lt;- ggplot(data = stu_qqq_grade,\n       aes(y = math)) +\n  geom_violin(aes(x=0)) +\n  geom_boxplot()+\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 1) +\n  scale_y_continuous(NULL, limits = c(0,1000)) +\n  scale_x_continuous(\"MATH GRADES\", breaks = NULL) +\n  theme_minimal()\np2 &lt;- ggplot(data = stu_qqq_grade,\n       aes(y = science)) +\n  geom_violin(aes(x=0)) +\n  geom_boxplot()+\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 1) +\n  scale_y_continuous(NULL, limits = c(0,1000)) +\n  scale_x_continuous(\"SCIENCE GRADES\", breaks = NULL) +\n  theme_minimal()\np3 &lt;- ggplot(data = stu_qqq_grade,\n       aes(y = read)) +\n  geom_violin(aes(x=0)) +\n  geom_boxplot() +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 1) +\n  scale_y_continuous(NULL, limits = c(0,1000)) +\n  scale_x_continuous(\"READING GRADES\", breaks = NULL) +\n  theme_minimal()\n\np1|p2|p3\n\n\n\n\n\n\n\n\nFrom the figure above, the distribution of the performances are normal. However, there is a slight higher performance from one to another. (math &gt; science &gt; reading). Can also be seen that the variance for each performance is quite large. This could mean that student in Singapore does have large performance differences between one and another. This could be caused by multiple reasoning such as the school, gender, and social economic standing.\n\n\n2. Gender\nThe first factor that we are going to look into is gender.\n\nlength(stu_qqq$gender[is.na(stu_qqq$gender)])\n\n[1] 0\n\n\n\nggplot(data = stu_qqq,\n       aes(x = gender)) +\n  geom_bar(width = 0.5,\n           color = \"grey50\",\n           fill = \"grey90\")+\n  theme_minimal()\n\n\n\n\n\n\n\n\nFrom the distribution graph above can be seen that the questionnaire have similar number of male and female student.\n\nMathScienceReading\n\n\nFrom the graph below, can be seen that there are VERY SMALL differences between male and female science scores, with male have a SLIGHTLY HIGHER average and median score\n\n\nShow the code\nstats &lt;- data.frame(gender = as.factor(c('Female','Male')),\n                    mean = c(mean(stu_qqq$math[stu_qqq$gender == \"Female\"]),\n                             mean(stu_qqq$math[stu_qqq$gender == \"Male\"])),\n                    median = c(median(stu_qqq$math[stu_qqq$gender == \"Female\"]),\n                               median(stu_qqq$math[stu_qqq$gender == \"Male\"])) )\n\nggplot(data = stu_qqq,\n       aes(y = math)) +\n  geom_histogram(bins = 10,\n                 color = 'grey50',\n                 fill = 'grey90') +\n  facet_wrap(~ gender) +\n  geom_hline(data = stats,\n             mapping = aes(yintercept=mean),\n             color = \"red\") +\n  geom_hline(data = stats,\n             mapping = aes(yintercept=median),\n             color = \"blue\") +\n  annotate(\n    'text',\n    x = Inf,\n    y = Inf,\n    hjust = 1,\n    vjust = 2.1,\n    label = paste(\"MEAN\"),\n    color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = Inf,\n    y = Inf,\n    hjust = 1,\n    vjust = 1,\n    label = paste(\"MEDIAN\"),\n    color = \"blue\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nFrom the graph below, can be seen that there are VERY SMALL differences between male and female science scores, with male have a SLIGHTLY HIGHER average and median score\n\n\nShow the code\nstats &lt;- data.frame(gender = as.factor(c('Female','Male')),\n                    mean = c(mean(stu_qqq$science[stu_qqq$gender == \"Female\"]),\n                             mean(stu_qqq$science[stu_qqq$gender == \"Male\"])),\n                    median = c(median(stu_qqq$science[stu_qqq$gender == \"Female\"]),\n                               median(stu_qqq$science[stu_qqq$gender == \"Male\"])) )\n\nggplot(data = stu_qqq,\n       aes(y = science)) +\n  geom_histogram(bins = 10,\n                 color = 'grey50',\n                 fill = 'grey90') +\n  facet_wrap(~ gender) +\n  geom_hline(data = stats,\n             mapping = aes(yintercept=mean),\n             color = \"red\") +\n  geom_hline(data = stats,\n             mapping = aes(yintercept=median),\n             color = \"blue\") +\n  annotate(\n    'text',\n    x = Inf,\n    y = Inf,\n    hjust = 1,\n    vjust = 2.1,\n    label = paste(\"MEAN\"),\n    color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = Inf,\n    y = Inf,\n    hjust = 1,\n    vjust = 1,\n    label = paste(\"MEDIAN\"),\n    color = \"blue\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nFrom the graph below, can be seen that there are VERY SMALL differences between male and female reading scores, with male have a SLIGHTLY LOWER average and median score\n\n\nShow the code\nstats &lt;- data.frame(gender = as.factor(c('Female','Male')),\n                    mean = c(mean(stu_qqq$read[stu_qqq$gender == \"Female\"]),\n                             mean(stu_qqq$read[stu_qqq$gender == \"Male\"])),\n                    median = c(median(stu_qqq$read[stu_qqq$gender == \"Female\"]),\n                               median(stu_qqq$read[stu_qqq$gender == \"Male\"])) )\n\nggplot(data = stu_qqq,\n       aes(y = read)) +\n  geom_histogram(bins = 10,\n                 color = 'grey50',\n                 fill = 'grey90') +\n  facet_wrap(~ gender) +\n  geom_hline(data = stats,\n             mapping = aes(yintercept=mean),\n             color = \"red\") +\n  geom_hline(data = stats,\n             mapping = aes(yintercept=median),\n             color = \"blue\") +\n  annotate(\n    'text',\n    x = Inf,\n    y = Inf,\n    hjust = 1,\n    vjust = 2.1,\n    label = paste(\"MEAN\"),\n    color = \"red\"\n  ) +\n  annotate(\n    'text',\n    x = Inf,\n    y = Inf,\n    hjust = 1,\n    vjust = 1,\n    label = paste(\"MEDIAN\"),\n    color = \"blue\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\n\nOverall, can be concluded that student’s performances are EQUAL no matter the gender is.\n\n\n3. School\n\nlength(stu_qqq$school_ID[is.na(stu_qqq$school_ID)])\n\n[1] 0\n\n\nThere are no NA cell on school ID.\n\nlength(unique(stu_qqq$school_ID))\n\n[1] 164\n\n\nThe student that was participating in this questionnaire was from 164 different school in Singapore\n\naverage_math_SG &lt;- mean(stu_qqq$math)\naverage_scie_SG &lt;- mean(stu_qqq$science)\naverage_read_SG &lt;- mean(stu_qqq$read)\n\nstu_qqq_sch &lt;- stu_qqq %&gt;%\n  group_by(school_ID) %&gt;%\n  mutate(average_math_diff = abs(mean(math)-average_math_SG),\n         average_science_diff = abs(mean(science)-average_scie_SG),\n         average_read_diff = abs(mean(read)-average_read_SG)) %&gt;%\n  select(school_ID, average_math_diff, average_science_diff, average_read_diff) %&gt;%\n  unique() \n\nOn the code above we are going to calculate the average of performance of student for each school across Singapore against Singapore overall average.\nFollowed by calculating the error or the differences between each school average and the average in Singapore.\n\n\nShow the code\np1 &lt;- ggplot(data = stu_qqq_sch,\n       aes(y = average_math_diff)) +\n  geom_boxplot(width = 0.1) +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y = \"mean\",         \n               colour = \"red\", \n               size = 1) +\n  scale_y_continuous(NULL, limits = c(0,220)) +\n  scale_x_continuous(\"math avg grade diff\", breaks = NULL) +\n  theme_minimal()\n\np2 &lt;- ggplot(data = stu_qqq_sch,\n       aes(y = average_science_diff)) +\n  geom_boxplot(width = 0.1) +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y =\"mean\",         \n               colour =\"red\", \n               size=1) +\n  scale_y_continuous(NULL, limits = c(0,220)) +\n  scale_x_continuous(\"science avg grade diff\", breaks = NULL) +\n  theme_minimal()\n\np3 &lt;- ggplot(data = stu_qqq_sch,\n       aes(y = average_read_diff)) +\n  geom_boxplot(width = 0.1) +\n  stat_boxplot(geom = \"errorbar\", width = 0.05) +\n  stat_summary(aes(x = 0),\n               geom = \"point\",       \n               fun.y =\"mean\",         \n               colour =\"red\", \n               size=1) +\n  scale_y_continuous(NULL, limits = c(0,220)) +\n  scale_x_continuous(\"reading avg grade diff\", breaks = NULL) +\n  theme_minimal()\n\np1|p2|p3\n\n\n\n\n\n\n\n\n\nThe plots above show that the differences between all study subject were similar. However, the differences between a school and the Singapore average are ranged from 0 to 220. And, the average differences is around 40. This mean that not every single school in Singapore are having the same performance with each other.\nOn the other hand, the q3 of the box plot lay around 70 point scores. This mean that almost 75% of school in Singapore are located between 0-70 point difference to national average. On the other side, there are some school that are having almost 150 point difference either higher or lower against the national average.\n\n\n4. Social Economic\nThe last factor that are going to be explored is social economic. The social economic range from -3.55 to 3.28. there are 47 row that has no social economic score.\n\nsummary(stu_qqq$socio_economic)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n-3.5488 -0.2327  0.4817  0.2904  0.9036  3.2780      47 \n\n\nThe data contain na value. Therefore, we are going to remove it from our analysis using drop_na().\n\nstu_qqq_socec &lt;- stu_qqq %&gt;%\n  select(math, science, read, socio_economic) %&gt;%\n  drop_na()\n\nThe code below plot the distribution of student social economic standing in Singapore.\n\n\nShow the code\nggplot(data = stu_qqq_socec,\n       aes(y = socio_economic)) +\n  geom_violin(aes(x = 0))+\n  geom_boxplot()+\n  stat_summary(geom = 'point',\n               fun = 'mean',\n               aes(x = 0),\n               color = 'red') +\n  scale_y_continuous(NULL) +\n  scale_x_continuous('Social Economic Standing', breaks = NULL) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\ncor1 &lt;- round(cor(stu_qqq_socec$math, stu_qqq_socec$socio_economic),2)\ncor2 &lt;- round(cor(stu_qqq_socec$science, stu_qqq_socec$socio_economic),2)\ncor3 &lt;- round(cor(stu_qqq_socec$read, stu_qqq_socec$socio_economic),2)\n\np1 &lt;- ggplot(data = stu_qqq_socec,\n             aes(y = math, x = socio_economic)) +\n        geom_point(size = 0.1)+\n        geom_smooth(method = lm) + \n        annotate(\"text\", x = 2.5, y = 600, label=paste0(\"r = \", cor1), color = 'blue') +\n        theme_minimal()\n\np2 &lt;- ggplot(data = stu_qqq_socec,\n             aes(y = science, x = socio_economic)) +\n        geom_point(size = 0.1)+\n        geom_smooth(method = lm) +\n        annotate(\"text\", x = 2.5, y = 600, label=paste0(\"r = \", cor2), color = 'blue') + \n        theme_minimal()\n\np3 &lt;- ggplot(data = stu_qqq_socec,\n             aes(y = read, x = socio_economic)) +\n        geom_point(size = 0.1)+\n        geom_smooth(method = lm) + \n        annotate(\"text\", x = 2.5, y = 600, label=paste0(\"r = \", cor3), color = 'blue') +\n        theme_minimal()\n\np1/p2/p3\n\n\n\n\n\n\n\n\n\nFrom all the 3 plot, can be seen that the scatter are quite distributed across all levels. However, all the correlation between social economic and all the performances are around 0.44 which show weak to medium positive correlation between the social economic and student’s performances. Can be said that the higher social economic standing of a student, the higher their score will be."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex1/Take-home_Ex1.html#conclusion",
    "title": "Take-Home Exercise 1",
    "section": "Conclusion",
    "text": "Conclusion\n\nStudent performances between subjects are similar\nGender does not affect student performances\nNot all school in Singapore are equal\nSocial economic standing play a small part toward students’ performances"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\nTidyverse :\nHaven :\n\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#loading-r-packages",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#loading-r-packages",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "",
    "text": "In this in-class exercise, two R packages will be used. They are:\n\nTidyverse :\nHaven :\n\n\npacman::p_load(tidyverse, haven)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-pisa-data",
    "href": "In-class_Ex/In-class_Ex1/In-class_Ex1.html#importing-pisa-data",
    "title": "In-class Exercise 1: Now You See It!",
    "section": "Importing PISA data",
    "text": "Importing PISA data\nThe code chunk below uses read_sas() of haven to import PISA data into R\n\nstu_qqq &lt;- read_sas('data/cy08msp_stu_qqq.sas7bdat')\n\n\nstu_qqq_SG &lt;- stu_qqq %&gt;%\n  filter(CNT == \"SGP\")\n\n\nwrite_rds(stu_qqq_SG, 'data/stu_qqq_SG.rds')\n\n\nstu_qqq_SG &lt;- read_rds('data/stu_qqq_SG.rds')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "in this hands on exercise, we are going to explore a new statistical graphic method for visualising distribution: ridgeline and raincloud plot by ggplot2 extenstions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#overview",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "",
    "text": "in this hands on exercise, we are going to explore a new statistical graphic method for visualising distribution: ridgeline and raincloud plot by ggplot2 extenstions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#getting-started",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Getting started",
    "text": "Getting started\n\nIntall and Load packages\n\nggridges: ggplot2 extension to plot ridgeline\nggdist: to visualise distribution and uncertainty\n\n\npacman::p_load(ggdist, ggridges, ggthemes, colorspace, tidyverse)\n\n\n\nImporting data\n\nexam &lt;- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#visualising-distribution-with-ridgeline",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#visualising-distribution-with-ridgeline",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Visualising distribution with ridgeline",
    "text": "Visualising distribution with ridgeline\nridgeline plot also commonly called by joyplot. it is to visualise numeric value distribution of several groups.\nit is usually used to plot distribution across medium to high number of group (more than 5)\n\nggridges method\nthere are 2 geom plot :\n\ngeom_ridgeline(): to draw the height values directly to the ridgeline\ngeom_density_ridges(): i take estimates to draw the distribution plot\n\nhere are plot using geom density ridges:\n\nggplot(data = exam,\n       aes(x = ENGLISH,\n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0)\n  ) +\n  scale_y_discrete(NULL, expand = expansion(add = c(0.2,2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nvarying fill color among x axis\nusing the geom_ridgeline_gradient() or geom_density_ridges_gradient()\n\nggplot(data = exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = stat(x))) + \n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01\n  ) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") + \n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0,0)\n  ) +\n  scale_y_discrete(NULL, expand = expansion(add = c(0.2,2.6))) +\n  theme_ridges()\n\n\n\n\n\n\nmapping probability to the color\nusing stat_density_ridges()\n\nggplot(data = exam,\n       aes(x = ENGLISH,\n           y = CLASS,\n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\",\n                      calc_ecdf = TRUE) + \n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction =  -1) +\n  theme_ridges()\n\n\n\n\n\nadding quantile lines\nusing geom_density_ridges_gradient() and stat(quantile)\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n\n\n\n\n\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n\n\n\n\nwe can also color it manually"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#visualising-distribution-with-raincloud",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4a.html#visualising-distribution-with-raincloud",
    "title": "Hands-on Exercise 4a: Visualising Distribution",
    "section": "Visualising distribution with raincloud",
    "text": "Visualising distribution with raincloud\n\nhalf eye graph\nplot containing a half density and a slab interval\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n\n\n\n\n\n\nadding the box plot\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n\n\n\n\n\n\nadding the dot plots\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n\n\n\n\n\n\nfinishing touch\nusing coordflip to flip the rain plot and adding theme\n\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "in this hands on exercise, we we explore:\n\nggstatsplot package to create visual graphics with rich statistical information\nperformance package to visualise model diagnostics\nparameteres package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#overview",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "",
    "text": "in this hands on exercise, we we explore:\n\nggstatsplot package to create visual graphics with rich statistical information\nperformance package to visualise model diagnostics\nparameteres package to visualise model parameters"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visual-statistical-analysis-with-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visual-statistical-analysis-with-ggstatsplot",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "Visual statistical analysis with ggstatsplot",
    "text": "Visual statistical analysis with ggstatsplot\nggstats plot is ggplot2 extension to create a more detail information rich plot graphic\nit is an alternative statistical inference method\nit is a best practice for statistical reporting"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#getting-started",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "Getting started",
    "text": "Getting started\n\nLoading and installing package\n\npacman::p_load(ggstatsplot, tidyverse)\n\n\n\nimporting data\n\nexam &lt;- read_csv('data/Exam_data.csv')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visualising-ggstatsplot",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#visualising-ggstatsplot",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "visualising ggstatsplot",
    "text": "visualising ggstatsplot\n\nBayes factor\n\nA Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.\nThat’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.\nWhen we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as\n\n\n\nThe Schwarz criterion is one of the easiest ways to calculate rough approximation of the Bayes Factor.\n\n\n\ngghistostats: one-sample test\n\nset.seed(1234)\n\ngghistostats(\n  data = exam,\n  x = ENGLISH,\n  type = \"bayes\",\n  test.value = 60,\n  xlab = \"English scores\"\n)\n\n\n\n\n\n\n\n\n\n\nggbetweenstats: two-sample test\n\nggbetweenstats(\n  data = exam,\n  x = GENDER, \n  y = MATHS,\n  type = \"np\",\n  messages = FALSE\n)\n\n\n\n\n\n\n\n\n\n\nggbetweenstats: one way ANOVA\n\nggbetweenstats(\n  data = exam,\n  x = RACE, \n  y = ENGLISH,\n  type = \"p\",\n  mean.ci = TRUE, \n  pairwise.comparisons = TRUE, \n  pairwise.display = \"s\",\n  p.adjust.method = \"fdr\",\n  messages = FALSE\n)\n\nError in validObject(.Object) : \n  invalid class \"ddenseModelMatrix\" object: superclass \"xMatrix\" not defined in the environment of the object's class\n\n\n\n\n\n\n\n\n\n\n\nggscatterstats: Correlation significance test\n\nggscatterstats(\n  data = exam,\n  x = MATHS,\n  y = ENGLISH,\n  marginal = FALSE,\n  )\n\n\n\n\n\n\n\n\n\n\nggbarstats: association significance test\n\nexam1 &lt;- exam %&gt;% \n  mutate(MATHS_bins = \n           cut(MATHS, \n               breaks = c(0,60,75,85,100))\n)\n\n\nggbarstats(exam1, \n           x = MATHS_bins, \n           y = GENDER)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#getting-started-2",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#getting-started-2",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "Getting started 2",
    "text": "Getting started 2\n\nInstalling and loading the libraries\n\npacman::p_load(readxl, performance, parameters, see)\n\n\n\nImporting Excel file\n\ncar_resale &lt;- read_xls(\"data/ToyotaCorolla.xls\", \n                       \"data\")\ncar_resale\n\n# A tibble: 1,436 × 38\n      Id Model    Price Age_08_04 Mfg_Month Mfg_Year     KM Quarterly_Tax Weight\n   &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;  &lt;dbl&gt;         &lt;dbl&gt;  &lt;dbl&gt;\n 1    81 TOYOTA … 18950        25         8     2002  20019           100   1180\n 2     1 TOYOTA … 13500        23        10     2002  46986           210   1165\n 3     2 TOYOTA … 13750        23        10     2002  72937           210   1165\n 4     3  TOYOTA… 13950        24         9     2002  41711           210   1165\n 5     4 TOYOTA … 14950        26         7     2002  48000           210   1165\n 6     5 TOYOTA … 13750        30         3     2002  38500           210   1170\n 7     6 TOYOTA … 12950        32         1     2002  61000           210   1170\n 8     7  TOYOTA… 16900        27         6     2002  94612           210   1245\n 9     8 TOYOTA … 18600        30         3     2002  75889           210   1245\n10    44 TOYOTA … 16950        27         6     2002 110404           234   1255\n# ℹ 1,426 more rows\n# ℹ 29 more variables: Guarantee_Period &lt;dbl&gt;, HP_Bin &lt;chr&gt;, CC_bin &lt;chr&gt;,\n#   Doors &lt;dbl&gt;, Gears &lt;dbl&gt;, Cylinders &lt;dbl&gt;, Fuel_Type &lt;chr&gt;, Color &lt;chr&gt;,\n#   Met_Color &lt;dbl&gt;, Automatic &lt;dbl&gt;, Mfr_Guarantee &lt;dbl&gt;,\n#   BOVAG_Guarantee &lt;dbl&gt;, ABS &lt;dbl&gt;, Airbag_1 &lt;dbl&gt;, Airbag_2 &lt;dbl&gt;,\n#   Airco &lt;dbl&gt;, Automatic_airco &lt;dbl&gt;, Boardcomputer &lt;dbl&gt;, CD_Player &lt;dbl&gt;,\n#   Central_Lock &lt;dbl&gt;, Powered_Windows &lt;dbl&gt;, Power_Steering &lt;dbl&gt;, …"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#performance-package",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#performance-package",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "Performance package",
    "text": "Performance package\n\nMultiple Regression Model using lm()\n\nmodel &lt;- lm(Price ~ Age_08_04 + Mfg_Year + KM + \n              Weight + Guarantee_Period, data = car_resale)\nmodel\n\n\nCall:\nlm(formula = Price ~ Age_08_04 + Mfg_Year + KM + Weight + Guarantee_Period, \n    data = car_resale)\n\nCoefficients:\n     (Intercept)         Age_08_04          Mfg_Year                KM  \n      -2.637e+06        -1.409e+01         1.315e+03        -2.323e-02  \n          Weight  Guarantee_Period  \n       1.903e+01         2.770e+01  \n\n\n\n\nmulticolinearity check\n\ncheck_collinearity(model)\n\n# Check for Multicollinearity\n\nLow Correlation\n\n             Term  VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n               KM 1.46 [ 1.37,  1.57]         1.21      0.68     [0.64, 0.73]\n           Weight 1.41 [ 1.32,  1.51]         1.19      0.71     [0.66, 0.76]\n Guarantee_Period 1.04 [ 1.01,  1.17]         1.02      0.97     [0.86, 0.99]\n\nHigh Correlation\n\n      Term   VIF     VIF 95% CI Increased SE Tolerance Tolerance 95% CI\n Age_08_04 31.07 [28.08, 34.38]         5.57      0.03     [0.03, 0.04]\n  Mfg_Year 31.16 [28.16, 34.48]         5.58      0.03     [0.03, 0.04]\n\n\n\n\nchecking normality assumption\n\nmodel1 &lt;- lm(Price ~ Age_08_04 + KM + \n              Weight + Guarantee_Period, data = car_resale)\n\n\ncheck_n &lt;- check_normality(model1)\n\n\nplot(check_n)\n\n\n\n\n\n\n\n\n\n\ncheck homogeneity of variance of the model\n\ncheck_h &lt;- check_heteroscedasticity(model1)\n\n\nplot(check_h)\n\n\n\n\n\n\n\n\n\n\ncomplete check\n\ncheck_model(model1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#see-method",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#see-method",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "See method",
    "text": "See method\n\nplot(parameters(model1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#ggcoefstats-methods",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4b.html#ggcoefstats-methods",
    "title": "Hands-on_Exercise 4b: Visual Statistical Analysis",
    "section": "ggcoefstats() methods",
    "text": "ggcoefstats() methods\n\nggcoefstats(model1, \n            output = \"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html",
    "title": "Hands-on_Exercise 4c: Visualising Uncertainty",
    "section": "",
    "text": "Plotting visual uncertainty using :\n\nerror bars: ggplot2\ninteractive error bars: ggplot2, plotly, and DT\nadvanced: ggdist\nhypothetical outcole plots: ungeviz"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#overview",
    "title": "Hands-on_Exercise 4c: Visualising Uncertainty",
    "section": "",
    "text": "Plotting visual uncertainty using :\n\nerror bars: ggplot2\ninteractive error bars: ggplot2, plotly, and DT\nadvanced: ggdist\nhypothetical outcole plots: ungeviz"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#getting-started",
    "title": "Hands-on_Exercise 4c: Visualising Uncertainty",
    "section": "Getting Started",
    "text": "Getting Started\n\nIntalling and laoding the packages\n\ndevtools::install_github(\"wilkelab/ungeviz\")\n\n\npacman::p_load(ungeviz, plotly, crosstalk,\n               DT, ggdist, ggridges,\n               colorspace, gganimate, tidyverse)\n\n\n\nData Import\n\nexam &lt;- read_csv(\"data/Exam_data.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualising-uncertainty-of-point-estimate-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualising-uncertainty-of-point-estimate-ggplot2",
    "title": "Hands-on_Exercise 4c: Visualising Uncertainty",
    "section": "Visualising uncertainty of point estimate: ggplot2",
    "text": "Visualising uncertainty of point estimate: ggplot2\npoint estimate is a single number e.g mean, median.\nuncertainty is: standard error, confidence interval, credible interval\nwe are going to visualise using data of math exam score grouped by race\n\nmy_sum &lt;- exam %&gt;%\n  group_by(RACE) %&gt;%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n    ) %&gt;%\n  mutate(se=sd/sqrt(n-1))\n\npreview of the stats\n\nknitr::kable(head(my_sum), format = 'html')\n\n\n\n\nRACE\nn\nmean\nsd\nse\n\n\n\n\nChinese\n193\n76.50777\n15.69040\n1.132357\n\n\nIndian\n12\n60.66667\n23.35237\n7.041005\n\n\nMalay\n108\n57.44444\n21.13478\n2.043177\n\n\nOthers\n9\n69.66667\n10.72381\n3.791438\n\n\n\n\n\n\n\n\nerror bars\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE, \n        ymin=mean-se, \n        ymax=mean+se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  ggtitle(\"Standard error of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\nconfidence interval\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=reorder(RACE, -mean), \n        ymin=mean-1.96*se, \n        ymax=mean+1.96*se), \n    width=0.2, \n    colour=\"black\", \n    alpha=0.9, \n    size=0.5) +\n  geom_point(aes\n           (x=RACE, \n            y=mean), \n           stat=\"identity\", \n           color=\"red\",\n           size = 1.5,\n           alpha=1) +\n  labs(x = \"Maths score\",\n       title = \"95% confidence interval of mean maths score by race\")\n\n\n\n\n\n\n\n\n\n\ninteractive error bars\n\nshared_df = SharedData$new(my_sum)\n\nbscols(widths = c(4,8),\n       ggplotly((ggplot(shared_df) +\n                   geom_errorbar(aes(\n                     x=reorder(RACE, -mean),\n                     ymin=mean-2.58*se, \n                     ymax=mean+2.58*se), \n                     width=0.2, \n                     colour=\"black\", \n                     alpha=0.9, \n                     size=0.5) +\n                   geom_point(aes(\n                     x=RACE, \n                     y=mean, \n                     text = paste(\"Race:\", `RACE`, \n                                  \"&lt;br&gt;N:\", `n`,\n                                  \"&lt;br&gt;Avg. Scores:\", round(mean, digits = 2),\n                                  \"&lt;br&gt;95% CI:[\", \n                                  round((mean-2.58*se), digits = 2), \",\",\n                                  round((mean+2.58*se), digits = 2),\"]\")),\n                     stat=\"identity\", \n                     color=\"red\", \n                     size = 1.5, \n                     alpha=1) + \n                   xlab(\"Race\") + \n                   ylab(\"Average Scores\") + \n                   theme_minimal() + \n                   theme(axis.text.x = element_text(\n                     angle = 45, vjust = 0.5, hjust=1)) +\n                   ggtitle(\"99% Confidence interval of average /&lt;br&gt;maths scores by race\")), \n                tooltip = \"text\"), \n       DT::datatable(shared_df, \n                     rownames = FALSE, \n                     class=\"compact\", \n                     width=\"100%\", \n                     options = list(pageLength = 10,\n                                    scrollX=T), \n                     colnames = c(\"No. of pupils\", \n                                  \"Avg Scores\",\n                                  \"Std Dev\",\n                                  \"Std Error\")) %&gt;%\n         formatRound(columns=c('mean', 'sd', 'se'),\n                     digits=2))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualising-uncertainty-ggdist-package",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#visualising-uncertainty-ggdist-package",
    "title": "Hands-on_Exercise 4c: Visualising Uncertainty",
    "section": "Visualising uncertainty: ggdist package",
    "text": "Visualising uncertainty: ggdist package\n\nggdist is an R package that provides a flexible set of ggplot2 geoms and stats designed especially for visualising distributions and uncertainty.\nIt is designed for both frequentist and Bayesian uncertainty visualization, taking the view that uncertainty visualization can be unified through the perspective of distribution visualization:\n\nfor frequentist models, one visualises confidence distributions or bootstrap distributions (see vignette(“freq-uncertainty-vis”));\nfor Bayesian models, one visualises probability distributions (see the tidybayes package, which builds on top of ggdist).\n\n\n\n\nuncertainty of point estimates using ggdist method 1\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval() +\n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\ntrying the width, point, and interval attribute\n\nexam %&gt;%\n  ggplot(aes(x = RACE, y = MATHS)) +\n  stat_pointinterval(\n    .width = 0.95,\n    point_interval = 'median_qi') +\n  labs(\n    title = \"Visualising confidence intervals of median math score\",\n    subtitle = \"Median Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nuncertainty of point estimates using ggdist method 2\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_pointinterval(.width = c(0.95,0.99)) +   \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Mean Point + Multiple-interval plot\")\n\n\n\n\n\n\n\n\n\n\nuncertainty of point estimates using ggdist method 3\n\nexam %&gt;%\n  ggplot(aes(x = RACE, \n             y = MATHS)) +\n  stat_gradientinterval(   \n    fill = \"skyblue\",      \n    show.legend = TRUE     \n  ) +                        \n  labs(\n    title = \"Visualising confidence intervals of mean math score\",\n    subtitle = \"Gradient + interval plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#hypothetical-outcome-plots-hops",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4c.html#hypothetical-outcome-plots-hops",
    "title": "Hands-on_Exercise 4c: Visualising Uncertainty",
    "section": "Hypothetical Outcome Plots (HOPs)",
    "text": "Hypothetical Outcome Plots (HOPs)\n\nggplot(data = exam, \n       (aes(x = factor(RACE), y = MATHS))) +\n  geom_point(position = position_jitter(\n    height = 0.3, width = 0.05), \n    size = 0.4, color = \"#0072B2\", alpha = 1/2) +\n  geom_hpline(data = sampler(25, group = RACE), height = 0.6, color = \"#D55E00\") +\n  theme_bw() + \n  # `.draw` is a generated column indicating the sample draw\n  transition_states(.draw, 1, 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html",
    "title": "Hands-on_Exercise 4d: Funnel Plots for Fair Comparison",
    "section": "",
    "text": "we are going to designed data visualisation to performed unbiased comparison utilising:\n\nfunnelPlotR: plotting funnel plot\nggplot2\nplotly: for interactivity"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#overview",
    "title": "Hands-on_Exercise 4d: Funnel Plots for Fair Comparison",
    "section": "",
    "text": "we are going to designed data visualisation to performed unbiased comparison utilising:\n\nfunnelPlotR: plotting funnel plot\nggplot2\nplotly: for interactivity"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#installing-and-importing-r-packages",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#installing-and-importing-r-packages",
    "title": "Hands-on_Exercise 4d: Funnel Plots for Fair Comparison",
    "section": "Installing and importing r packages",
    "text": "Installing and importing r packages\n\npacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#importing-data",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#importing-data",
    "title": "Hands-on_Exercise 4d: Funnel Plots for Fair Comparison",
    "section": "Importing data",
    "text": "Importing data\n\ncovid19 &lt;- read_csv(\"data/COVID-19_DKI_Jakarta.csv\") %&gt;%\n  mutate_if(is.character, as.factor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#funnelplotr",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#funnelplotr",
    "title": "Hands-on_Exercise 4d: Funnel Plots for Fair Comparison",
    "section": "FunnelPlotR",
    "text": "FunnelPlotR\nFunnelPlotR package uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:\n\nlimit: plot limits (95 or 99).\nlabel_outliers: to label outliers (true or false).\nPoisson_limits: to add Poisson limits to the plot.\nOD_adjust: to add overdispersed limits to the plot.\nxrange and yrange: to specify the range to display for axes, acts like a zoom function.\nOther aesthetic components such as graph title, axis labels etc.\n\n\nthe basic plot\n\nfunnel_plot(\n  numerator = covid19$Positive,\n  denominator = covid19$Death,\n  group = covid19$`Sub-district`\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 0 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nmakeover 1\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",     #&lt;&lt;\n  xrange = c(0, 6500),  #&lt;&lt;\n  yrange = c(0, 0.05)   #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion. \n\n\n\n\nMakeover 2\n\nfunnel_plot(\n  numerator = covid19$Death,\n  denominator = covid19$Positive,\n  group = covid19$`Sub-district`,\n  data_type = \"PR\",   \n  xrange = c(0, 6500),  \n  yrange = c(0, 0.05),\n  label = NA,\n  title = \"Cumulative COVID-19 Fatality Rate by Cumulative Total Number of COVID-19 Positive Cases\", #&lt;&lt;           \n  x_label = \"Cumulative COVID-19 Positive Cases\", #&lt;&lt;\n  y_label = \"Cumulative Fatality Rate\"  #&lt;&lt;\n)\n\n\n\n\n\n\n\n\nA funnel plot object with 267 points of which 7 are outliers. \nPlot is adjusted for overdispersion."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#ggplot-method",
    "href": "Hands-on_Ex/Hands-on_Ex4/Hands-on_Ex4d.html#ggplot-method",
    "title": "Hands-on_Exercise 4d: Funnel Plots for Fair Comparison",
    "section": "ggplot method",
    "text": "ggplot method\n\ncomputing the derived fields\n\ndf &lt;- covid19 %&gt;%\n  mutate(rate = Death / Positive) %&gt;%\n  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %&gt;%\n  filter(rate &gt; 0)\n\n\nfit.mean &lt;- weighted.mean(df$rate, 1/df$rate.se^2)\n\n\n\ncalculating lower and upper limit for 0.95 and 0.99 CI\n\nnumber.seq &lt;- seq(1, max(df$Positive), 1)\nnumber.ll95 &lt;- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul95 &lt;- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ll999 &lt;- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \nnumber.ul999 &lt;- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) \ndfCI &lt;- data.frame(number.ll95, number.ul95, number.ll999, \n                   number.ul999, number.seq, fit.mean)\n\n\n\nplotting\n\np &lt;- ggplot(df, aes(x = Positive, y = rate)) +\n  geom_point(aes(label=`Sub-district`), \n             alpha=0.4) +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul95), \n            size = 0.4, \n            colour = \"grey40\", \n            linetype = \"dashed\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ll999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_line(data = dfCI, \n            aes(x = number.seq, \n                y = number.ul999), \n            size = 0.4, \n            colour = \"grey40\") +\n  geom_hline(data = dfCI, \n             aes(yintercept = fit.mean), \n             size = 0.4, \n             colour = \"grey40\") +\n  coord_cartesian(ylim=c(0,0.05)) +\n  annotate(\"text\", x = 1, y = -0.13, label = \"95%\", size = 3, colour = \"grey40\") + \n  annotate(\"text\", x = 4.5, y = -0.18, label = \"99%\", size = 3, colour = \"grey40\") + \n  ggtitle(\"Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases\") +\n  xlab(\"Cumulative Number of COVID-19 Cases\") + \n  ylab(\"Cumulative Fatality Rate\") +\n  theme_light() +\n  theme(plot.title = element_text(size=12),\n        legend.position = c(0.91,0.85), \n        legend.title = element_text(size=7),\n        legend.text = element_text(size=7),\n        legend.background = element_rect(colour = \"grey60\", linetype = \"dotted\"),\n        legend.key.height = unit(0.3, \"cm\"))\np\n\n\n\n\n\n\n\n\n\n\nadding interactivity\n\nfp_ggplotly &lt;- ggplotly(p,\n  tooltip = c(\"label\", \n              \"x\", \n              \"y\"))\nfp_ggplotly"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html",
    "title": "Hands-on_Exercise 5a: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#overview",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "",
    "text": "Correlation coefficient is a popular statistic that use to measure the type and strength of the relationship between two variables. The values of a correlation coefficient ranges between -1.0 and 1.0. A correlation coefficient of 1 shows a perfect linear relationship between the two variables, while a -1.0 shows a perfect inverse relationship between the two variables. A correlation coefficient of 0.0 shows no linear relationship between the two variables.\nWhen multivariate data are used, the correlation coefficeints of the pair comparisons are displayed in a table form known as correlation matrix or scatterplot matrix.\nThere are three broad reasons for computing a correlation matrix.\n\nTo reveal the relationship between high-dimensional variables pair-wisely.\nTo input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.\nAs a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.\n\nWhen the data is large, both in terms of the number of observations and the number of variables, Corrgram tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:\n\nRendering the value of a correlation to depict its sign and magnitude, and\nReordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.\n\nIn this hands-on exercise, you will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, you will learn how to create correlation matrix using pairs() of R Graphics. Next, you will learn how to plot corrgram using corrplot package of R. Lastly, you will learn how to create an interactive correlation matrix using plotly R."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#getting-started",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting and downloading packages\n\npacman::p_load(corrplot, ggstatsplot, tidyverse)\n\n\n\nCode\nred &lt;- read_csv(\"data/winequality-red.csv\")\nred[\"type\"] = \"red\"\nwhite &lt;- read_csv(\"data/winequality-white.csv\")\nwhite[\"type\"] = \"white\"\n\n\n\n\nCode\nwine &lt;- rbind(red,white)\nwrite_csv(wine, \"data/wine_quality.csv\")\n\n\n\nwine &lt;- read_csv(\"data/wine_quality.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#pairs-method",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#pairs-method",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "Pairs Method",
    "text": "Pairs Method\n\nBasic Correlation\n\npairs(wine[,1:11])\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12])\n\n\n\n\n\n\n\n\n\n\nDrawing the lower corner\n\npairs(wine[,2:12], upper.panel = NULL)\n\n\n\n\n\n\n\n\n\npairs(wine[,2:12], lower.panel = NULL)\n\n\n\n\n\n\n\n\n\n\nCoefficient Correlation\nplotting the correlation scatter plot on lower side and plotting the correlation value on the upper side\n\npanel.cor &lt;- function(x, y, digits=2, prefix=\"\", cex.cor, ...) {\nusr &lt;- par(\"usr\")\non.exit(par(usr))\npar(usr = c(0, 1, 0, 1))\nr &lt;- abs(cor(x, y, use=\"complete.obs\"))\ntxt &lt;- format(c(r, 0.123456789), digits=digits)[1]\ntxt &lt;- paste(prefix, txt, sep=\"\")\nif(missing(cex.cor)) cex.cor &lt;- 0.8/strwidth(txt)\ntext(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)\n}\n\npairs(wine[,2:12], \n      upper.panel = panel.cor)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#ggcorrmat-method",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#ggcorrmat-method",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "ggcorrmat method",
    "text": "ggcorrmat method\nOne of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, Corrgram data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.\nThe are at least three R packages provide function to plot corrgram, they are:\n\ncorrgram\nellipse\ncorrplot\n\nOn top that, some R package like ggstatsplot package also provides functions for building corrgram.\nIn this section, you will learn how to visualising correlation matrix by using ggcorrmat() of ggstatsplotpackage.\n\nBasic matrix\nOn of the advantage of using ggcorrmat() over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11)\n\n\n\n\n\n\n\n\n\nggstatsplot::ggcorrmat(\n  data = wine, \n  cor.vars = 1:11,\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  title    = \"Correlogram for wine dataset\",\n  subtitle = \"Four pairs are no significant at p &lt; 0.05\"\n)\n\n\n\n\n\n\n\n\nThe sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.\n\nggplot.component = list(\n    theme(text=element_text(size=5),\n      axis.text.x = element_text(size = 8),\n      axis.text.y = element_text(size = 8)))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#multiple-correlation-plot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#multiple-correlation-plot",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "multiple correlation plot",
    "text": "multiple correlation plot\nSince ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in ggcorrmat() but in the grouped_ggcorrmat() of ggstatsplot.\n\ngrouped_ggcorrmat(\n  data = wine,\n  cor.vars = 1:11,\n  grouping.var = type,\n  type = \"robust\",\n  p.adjust.method = \"holm\",\n  plotgrid.args = list(ncol = 2),\n  ggcorrplot.args = list(outline.color = \"black\", \n                         hc.order = TRUE,\n                         tl.cex = 10),\n  annotation.args = list(\n    tag_levels = \"a\",\n    title = \"Correlogram for wine dataset\",\n    subtitle = \"The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity\",\n    caption = \"Dataset: UCI Machine Learning Repository\"\n  )\n)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#corrplot-method",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5b.html#corrplot-method",
    "title": "Hands-on_Ex5b: Visual Correlation Analysis",
    "section": "Corrplot method",
    "text": "Corrplot method\nBefore we can plot a corrgram using corrplot(), we need to compute the correlation matrix of wine data frame.\nIn the code chunk below, cor() of R Stats is used to compute the correlation matrix of wine data frame.\n\nwine.cor &lt;- cor(wine[, 1:11])\n\nNext, corrplot() is used to plot the corrgram by using all the default setting as shown in the code chunk below.\n\ncorrplot(wine.cor)\n\n\n\n\n\n\n\n\n\ngeometry of corrplot\navailable geometry: circle, square, ellipse, number, shade, color and pie\nusing square\n\ncorrplot(wine.cor, \n         method = \"square\") \n\n\n\n\n\n\n\n\nusing ellipse\n\ncorrplot(wine.cor, \n         method = \"ellipse\") \n\n\n\n\n\n\n\n\n\n\nlayout of corrplot\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\")\n\n\n\n\n\n\n\n\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         type=\"lower\",\n         diag = FALSE,\n         tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nmixed layout\nnumber - square\n\ncorrplot.mixed(wine.cor, \n               lower = \"number\", \n               upper = \"square\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\nellipse - number\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\ncorrelation with significant test\nWith corrplot package, we can use the cor.mtest() to compute the p-values and confidence interval for each pair of variables.\n\nwine.sig = cor.mtest(wine.cor, conf.level= .95)\n\nWe can then use the p.mat argument of corrplot function as shown in the code chunk below.\n\ncorrplot(wine.cor,\n         method = \"number\",\n         type = \"lower\",\n         diag = FALSE,\n         tl.col = \"black\",\n         tl.srt = 45,\n         p.mat = wine.sig$p,\n         sig.level = .05)\n\n\n\n\n\n\n\n\n\n\nreordering\nMatrix reorder is very important for mining the hiden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-write by using the order argument of corrplot(). Currently, corrplotpackage support four sorting methods, they are:\n\n“AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.\n“FPC” for the first principal component order.\n“hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.\n\n“hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.\n\n“alphabet” for alphabetical order.\n\n“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in seriation package.\n\ncorrplot.mixed(wine.cor, \n               lower = \"ellipse\", \n               upper = \"number\",\n               tl.pos = \"lt\",\n               diag = \"l\",\n               order=\"AOE\",\n               tl.col = \"black\")\n\n\n\n\n\n\n\n\n\n\nclustering reordering\nIf using hclust, corrplot() can draw rectangles around the corrgram based on the results of hierarchical clustering.\n\ncorrplot(wine.cor, \n         method = \"ellipse\", \n         tl.pos = \"lt\",\n         tl.col = \"black\",\n         order=\"hclust\",\n         hclust.method = \"ward.D\",\n         addrect = 3)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html",
    "title": "Hands-on_Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#overview",
    "title": "Hands-on_Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "",
    "text": "Heatmaps visualise data through variations in colouring. When applied to a tabular format, heatmaps are useful for cross-examining multivariate data, through placing variables in the columns and observation (or records) in rowa and colouring the cells within the table. Heatmaps are good for showing variance across multiple variables, revealing any patterns, displaying whether any variables are similar to each other, and for detecting if any correlations exist in-between them.\nIn this hands-on exercise, you will gain hands-on experience on using R to plot static and interactive heatmap for visualising and analysing multivariate data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#getting-started",
    "title": "Hands-on_Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting and downloading packages\n\npacman::p_load(seriation, dendextend, heatmaply, tidyverse)\n\n\n\nImporting dataset\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")\n\n\n\nPreparing dataset\nchanging the row names to country names\n\nrow.names(wh) &lt;- wh$Country\n\n\n\nTransforming dataset into matrix\nThe data was loaded into a data frame, but heatmap require data matrix.\n\nwh1 &lt;- dplyr::select(wh, c(3, 7:12))\nwh_matrix &lt;- data.matrix(wh)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#static-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#static-heatmap",
    "title": "Hands-on_Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Static heatmap",
    "text": "Static heatmap\nBy default, heatmap() plots a cluster heatmap. The arguments Rowv=NA and Colv=NA are used to switch off the option of plotting the row and column dendrograms.\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      Rowv=NA, Colv=NA)\n\n\n\n\n\n\n\n\nwith dendrogram\n\nwh_heatmap &lt;- heatmap(wh_matrix)\n\n\n\n\n\n\n\n\nnormalisation across columns\n\nwh_heatmap &lt;- heatmap(wh_matrix,\n                      scale=\"column\",\n                      cexRow = 0.6, \n                      cexCol = 0.8,\n                      margins = c(10, 4))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#interactive-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5c.html#interactive-heatmap",
    "title": "Hands-on_Exercise 5c: Heatmap for Visualising and Analysing Multivariate Data",
    "section": "Interactive heatmap",
    "text": "Interactive heatmap\nheatmaply is an R package for building interactive cluster heatmap that can be shared online as a stand-alone HTML file. It is designed and maintained by Tal Galili.\nBefore we get started, you should review the Introduction to Heatmaply to have an overall understanding of the features and functions of Heatmaply package. You are also required to have the user manualof the package handy with you for reference purposes.\nIn this section, you will gain hands-on experience on using heatmaply to design an interactive cluster heatmap. We will still use the wh_matrix as the input data.\n\nWorking with heatmaply\n\nheatmaply(mtcars)\n\n\n\n\n\nThe code chunk below shows the basic syntax needed to create n interactive heatmap by using heatmaply package.\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)])\n\n\n\n\n\n\n\nData transformation\n\nscaling method\n\nWhen all variables are came from or assumed to come from some normal distribution, then scaling (i.e.: subtract the mean and divide by the standard deviation) would bring them all close to the standard normal distribution.\nIn such a case, each value would reflect the distance from the mean in units of standard deviation.\nThe scale argument in heatmaply() supports column and row scaling.\n\n\nheatmaply(wh_matrix[, -c(1, 2, 4, 5)],\n          scale = \"column\")\n\n\n\n\n\n\n\nnormalising method\n\nWhen variables in the data comes from possibly different (and non-normal) distributions, the normalize function can be used to bring data to the 0 to 1 scale by subtracting the minimum and dividing by the maximum of all observations.\nThis preserves the shape of each variable’s distribution while making them easily comparable on the same “scale”.\n\nDifferent from Scaling, the normalise method is performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\npercentising method\n\nThis is similar to ranking the variables, but instead of keeping the rank values, divide them by the maximal rank.\nThis is done by using the ecdf of the variables on their own values, bringing each value to its empirical percentile.\nThe benefit of the percentize function is that each value has a relatively clear interpretation, it is the percent of observations that got that value or below it.\n\nSimilar to Normalize method, the Percentize method is also performed on the input data set i.e. wh_matrix as shown in the code chunk below.\n\nheatmaply(percentize(wh_matrix[, -c(1, 2, 4, 5)]))\n\n\n\n\n\n\n\n\nClustering\nheatmaply supports a variety of hierarchical clustering algorithm. The main arguments provided are:\n\ndistfun: function used to compute the distance (dissimilarity) between both rows and columns. Defaults to dist. The options “pearson”, “spearman” and “kendall” can be used to use correlation-based clustering, which uses as.dist(1 - cor(t(x))) as the distance metric (using the specified correlation method).\nhclustfun: function used to compute the hierarchical clustering when Rowv or Colv are not dendrograms. Defaults to hclust.\ndist_method default is NULL, which results in “euclidean” to be used. It can accept alternative character strings indicating the method to be passed to distfun. By default distfun is “dist”” hence this can be one of “euclidean”, “maximum”, “manhattan”, “canberra”, “binary” or “minkowski”.\nhclust_method default is NULL, which results in “complete” method to be used. It can accept alternative character strings indicating the method to be passed to hclustfun. By default hclustfun is hclust hence this can be one of “ward.D”, “ward.D2”, “single”, “complete”, “average” (= UPGMA), “mcquitty” (= WPGMA), “median” (= WPGMC) or “centroid” (= UPGMC).\n\nIn general, a clustering model can be calibrated either manually or statistically.\n\nmanual\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\")\n\n\n\n\n\n\n\nstatistical\n\nwh_d &lt;- dist(normalize(wh_matrix[, -c(1, 2, 4, 5)]), method = \"euclidean\")\ndend_expend(wh_d)[[3]]\n\n  dist_methods hclust_methods     optim\n1      unknown         ward.D 0.6137851\n2      unknown        ward.D2 0.6289186\n3      unknown         single 0.4774362\n4      unknown       complete 0.6434009\n5      unknown        average 0.6701688\n6      unknown       mcquitty 0.5020102\n7      unknown         median 0.5901833\n8      unknown       centroid 0.6338734\n\n\n\nwh_clust &lt;- hclust(wh_d, method = \"average\")\nnum_k &lt;- find_k(wh_clust)\nplot(num_k)\n\n\n\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          dist_method = \"euclidean\",\n          hclust_method = \"average\",\n          k_row = 3)\n\n\n\n\n\n\n\n\nSeriation\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"OLO\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"GW\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"mean\")\n\n\n\n\n\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\")\n\n\n\n\n\n\n\nColour palettes\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          seriate = \"none\",\n          colors = Blues)\n\n\n\n\n\n\n\nFinal touch\n\nheatmaply(normalize(wh_matrix[, -c(1, 2, 4, 5)]),\n          Colv=NA,\n          seriate = \"none\",\n          colors = Blues,\n          k_row = 5,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"World Happiness Score and Variables by Country, 2018 \\nDataTransformation using Normalise Method\",\n          xlab = \"World Happiness Indicators\",\n          ylab = \"World Countries\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#overview",
    "title": "Hands-on_Exercise 5a: Creating Ternary Plot with R",
    "section": "",
    "text": "Ternary plots are a way of displaying the distribution and variability of three-part compositional data. (For example, the proportion of aged, economy active and young population or sand, silt, and clay in soil.) It’s display is a triangle with sides scaled from 0 to 1. Each side represents one of the three components. A point is plotted so that a line drawn perpendicular from the point to each leg of the triangle intersect at the component values of the point.\nIn this hands-on, you will learn how to build ternary plot programmatically using R for visualising and analysing population structure of Singapore.\nThe hands-on exercise consists of four steps:\n\nInstall and launch tidyverse and ggtern packages.\nDerive three new measures using mutate() function of dplyr package.\nBuild a static ternary plot using ggtern() function of ggtern package.\nBuild an interactive ternary plot using plot-ly() function of Plotly R package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#getting-started",
    "title": "Hands-on_Exercise 5a: Creating Ternary Plot with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting and installing packages\n\ntidyverse\nplotly: interactivity of the plots\nggtern: plotting ternary plot\n\n\npacman::p_load(tidyverse, plotly, ggtern)\n\n\n\nData Preparation\nwe are going to use Singapore resident population by planning area, age, and sex per year from 2000 to 2018\n\n#Reading the data into R environment\npop_data &lt;- read_csv(\"data/respopagsex2000to2018_tidy.csv\") \n\nwe are going to change the data format and combine the ages.\n\nyoung = 0 - 24 years old\nactive = 25 - 64 years old\nold = 65+ years old\n\n\n#Deriving the young, economy active and old measures\nagpop_mutated &lt;- pop_data %&gt;%\n  mutate(`Year` = as.character(Year))%&gt;%\n  spread(AG, Population) %&gt;%\n  mutate(YOUNG = rowSums(.[4:8]))%&gt;%\n  mutate(ACTIVE = rowSums(.[9:16]))  %&gt;%\n  mutate(OLD = rowSums(.[17:21])) %&gt;%\n  mutate(TOTAL = rowSums(.[22:24])) %&gt;%\n  filter(Year == 2018)%&gt;%\n  filter(TOTAL &gt; 0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#plotting-ternary-diagram",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5a.html#plotting-ternary-diagram",
    "title": "Hands-on_Exercise 5a: Creating Ternary Plot with R",
    "section": "Plotting ternary diagram",
    "text": "Plotting ternary diagram\n\nstatic ternary diagram\nplotting area based on percentage of young, active, and aold\n\n#Building the static ternary plot\nggtern(data=agpop_mutated,aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point()\n\n\n\n\n\n\n\n\nadding elements styles\n\n#Building the static ternary plot\nggtern(data=agpop_mutated, aes(x=YOUNG,y=ACTIVE, z=OLD)) +\n  geom_point() +\n  labs(title=\"Population structure, 2015\") +\n  theme_rgbw()\n\n\n\n\n\n\n\n\n\n\nplotting more interactive ternary diagram\n\n# reusable function for creating annotation object, title on top left\nlabel &lt;- function(txt) {\n  list(\n    text = txt, \n    x = 0.1, y = 1,\n    ax = 0, ay = 0,\n    xref = \"paper\", yref = \"paper\", \n    align = \"center\",\n    font = list(family = \"serif\", size = 15, color = \"white\"),\n    bgcolor = \"#b3b3b3\", bordercolor = \"black\", borderwidth = 2\n  )\n}\n\n# reusable function for axis formatting, format of hover effect\naxis &lt;- function(txt) {\n  list(\n    title = txt, tickformat = \".0%\", tickfont = list(size = 10)\n  )\n}\n\nternaryAxes &lt;- list(\n  aaxis = axis(\"Young\"), \n  baxis = axis(\"Active\"), \n  caxis = axis(\"Old\")\n)\n\n# Initiating a plotly visualization \nplot_ly(\n  agpop_mutated, \n  a = ~YOUNG, \n  b = ~ACTIVE, \n  c = ~OLD, \n  color = I(\"black\"), \n  type = \"scatterternary\"\n) %&gt;%\n  layout(\n    annotations = label(\"Ternary Markers\"), \n    ternary = ternaryAxes\n  )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html",
    "title": "Hands-on_Exercise 5e: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyrpackage. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#overview",
    "title": "Hands-on_Exercise 5e: Treemap Visualisation with R",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main section. First, you will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in dplyrpackage. Then, you will learn how to plot static treemap by using treemap package. In the third section, you will learn how to design interactive treemap by using d3treeR package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#getting-started",
    "title": "Hands-on_Exercise 5e: Treemap Visualisation with R",
    "section": "Getting started",
    "text": "Getting started\n\nimporting and downloading packages\n\npacman::p_load(treemap, treemapify, tidyverse) \n\n\n\ndata preparation\nrealis 2018 is property sale in Singapore released by Urban Redevelopment Authority in 2018\n\nrealis2018 &lt;- read_csv(\"data/realis2018.csv\")\n\n\n\ndata wrangling\nThe data.frame realis2018 is in trasaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frtame that is appropriate for treemap visualisation:\n\ngroup transaction records by Project Name, Planning Region, Planning Area, Property Type and Type of Sale, and\ncompute Total Unit Sold, Total Area, Median Unit Price and Median Transacted Price by applying appropriate summary statistics on No. of Units, Area (sqm), Unit Price ($ psm) and Transacted Price ($) respectively.\n\nTwo key verbs of dplyr package, namely: group_by() and summarize() will be used to perform these steps.\ngroup_by() breaks down a data.frame into specified groups of rows. When you then apply the verbs above on the resulting object they’ll be automatically applied “by group”.\nGrouping affects the verbs as follows:\n\ngrouped select() is the same as ungrouped select(), except that grouping variables are always retained.\ngrouped arrange() is the same as ungrouped; unless you set .by_group = TRUE, in which case it orders first by the grouping variables.\nmutate() and filter() are most useful in conjunction with window functions (like rank(), or min(x) == x). They are described in detail in vignette(“window-functions”).\nsample_n() and sample_frac() sample the specified number/fraction of rows in each group.\nsummarise() computes the summary for each group.\n\nIn our case, group_by() will used together with summarise() to derive the summarised data.frame.\nwe are going to group the sale by the project name, region, area, type, and type of sale. furthermore, we are going to sum them based on the group:\n\ntotal unit sold\ntotal area\nmedian unit price ($psm)\nmedian transacted price\n\n\nrealis2018_summarised &lt;- realis2018 %&gt;% \n  group_by(`Project Name`,`Planning Region`, \n           `Planning Area`, `Property Type`, \n           `Type of Sale`) %&gt;%\n  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE), \n            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),\n            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),\n            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#tree-map-package",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#tree-map-package",
    "title": "Hands-on_Exercise 5e: Treemap Visualisation with R",
    "section": "Tree map package",
    "text": "Tree map package\ntreemap package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: treemap() offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.\n\nstatic\n\nrealis2018_selected &lt;- realis2018_summarised %&gt;%\n  filter(`Property Type` == \"Condominium\", `Type of Sale` == \"Resale\")\n\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nusing the vcolor and type arguments\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type = \"value\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nusing pallete\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nmanual\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"RdYlBu\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThe colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as RdYlBu if the values are all positive or negative\n\nTo overcome this problem, a single colour palette such as Blues should be used.\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\n\nTree map Layout\nThe squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.\n\n\nalgorithm argument\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\n\nsortID\nto determine which square appears first\n\ntreemap(realis2018_selected,\n        index=c(\"Planning Region\", \"Planning Area\", \"Project Name\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"manual\",\n        palette=\"Blues\", \n        algorithm = \"squarified\",\n        sortID = \"Median Transacted Price\",\n        title=\"Resale Condominium by Planning Region and Area, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#treemapify",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#treemapify",
    "title": "Hands-on_Exercise 5e: Treemap Visualisation with R",
    "section": "Treemapify",
    "text": "Treemapify\ntreemapify is a R package specially developed to draw treemaps in ggplot2. In this section, you will learn how to designing treemps closely resemble treemaps designing in previous section by using treemapify. Before you getting started, you should read Introduction to “treemapify” its user guide.\n\nBasic Tree Map\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`),\n       layout = \"scol\",\n       start = \"bottomleft\") + \n  geom_treemap() +\n  scale_fill_gradient(low = \"light blue\", high = \"blue\")\n\n\n\n\n\n\n\n\n\n\nhierarchy\nplanning region\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`),\n       start = \"topleft\") + \n  geom_treemap()\n\n\n\n\n\n\n\n\nplanning area\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap()\n\n\n\n\n\n\n\n\nadding boundary line\n\nggplot(data=realis2018_selected, \n       aes(area = `Total Unit Sold`,\n           fill = `Median Unit Price ($ psm)`,\n           subgroup = `Planning Region`,\n           subgroup2 = `Planning Area`)) + \n  geom_treemap() +\n  geom_treemap_subgroup2_border(colour = \"gray40\",\n                                size = 2) +\n  geom_treemap_subgroup_border(colour = \"gray20\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#d3treer",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5e.html#d3treer",
    "title": "Hands-on_Exercise 5e: Treemap Visualisation with R",
    "section": "D3treeR",
    "text": "D3treeR\n\nlibrary(devtools)\ninstall_github(\"timelyportfolio/d3treeR\")\n\n\nlibrary(d3treeR)\n\n\ndesigning an interactive tree map\n\ntreemap() is used to build a treemap by using selected variables in condominium data.frame. The treemap created is save as object called tm.\n\n\ntm &lt;- treemap(realis2018_summarised,\n        index=c(\"Planning Region\", \"Planning Area\"),\n        vSize=\"Total Unit Sold\",\n        vColor=\"Median Unit Price ($ psm)\",\n        type=\"value\",\n        title=\"Private Residential Property Sold, 2017\",\n        title.legend = \"Median Unit Price (S$ per sq. m)\"\n        )\n\n\n\n\n\n\n\n\n\nThen d3tree() is used to build an interactive treemap.\n\n\nd3tree(tm,rootname = \"Singapore\" )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html",
    "title": "Hands-on_Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#overview",
    "title": "Hands-on_Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "",
    "text": "Parallel coordinates plot is a data visualisation specially designed for visualising and analysing multivariate, numerical data. It is ideal for comparing multiple variables together and seeing the relationships between them. For example, the variables contribute to Happiness Index. Parallel coordinates was invented by Alfred Inselberg in the 1970s as a way to visualize high-dimensional data. This data visualisation technique is more often found in academic and scientific communities than in business and consumer data visualizations. As pointed out by Stephen Few(2006), “This certainly isn’t a chart that you would present to the board of directors or place on your Web site for the general public. In fact, the strength of parallel coordinates isn’t in their ability to communicate some truth in the data to others, but rather in their ability to bring meaningful multivariate patterns and comparisons to light when used interactively for analysis.” For example, parallel coordinates plot can be used to characterise clusters detected during customer segmentation.\nBy the end of this hands-on exercise, you will gain hands-on experience on:\n\nplotting statistic parallel coordinates plots by using ggparcoord() of GGally package,\nplotting interactive parallel coordinates plots by using parcoords package, and\nplotting interactive parallel coordinates plots by using parallelPlot package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#getting-started",
    "title": "Hands-on_Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Getting Started",
    "text": "Getting Started\n\nimporting and loading packages\n\npacman::p_load(GGally, parallelPlot, tidyverse)\n\n\n\ndata preparation\n\nwh &lt;- read_csv(\"data/WHData-2018.csv\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#plotting-static-parallel-coordinate-plot",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#plotting-static-parallel-coordinate-plot",
    "title": "Hands-on_Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "plotting static parallel coordinate plot",
    "text": "plotting static parallel coordinate plot\nIn this section, you will learn how to plot static parallel coordinates plot by using ggparcoord() of GGally package. Before getting started, it is a good practice to read the function description in detail.\n\nbasic plot\n\nggparcoord(data = wh, \n           columns = c(7:12))\n\n\n\n\n\n\n\n\n\n\nwith boxplot\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Parallel Coordinates Plot of World Happines Variables\")\n\n\n\n\n\n\n\n\n\n\nwith facet\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region)\n\n\n\n\n\n\n\n\n\n\nrotating x-axis\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\n\n\n\n\n\n\n\nadjusting x-axis\n\nggparcoord(data = wh, \n           columns = c(7:12), \n           groupColumn = 2,\n           scale = \"uniminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of World Happines Variables by Region\") +\n  facet_wrap(~ Region) + \n  theme(axis.text.x = element_text(angle = 30, hjust=1))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#parallelplot-method",
    "href": "Hands-on_Ex/Hands-on_Ex5/Hands-on_Ex5d.html#parallelplot-method",
    "title": "Hands-on_Exercise 5d: Visual Multivariate Analysis with Parallel Coordinates Plot",
    "section": "Parallelplot method",
    "text": "Parallelplot method\n\nbasic\n\nwh &lt;- wh %&gt;%\n  select(\"Happiness score\", c(7:12))\nparallelPlot(wh,\n             width = 320,\n             height = 250)\n\n\n\n\n\n\n\nrotate axis\n\nparallelPlot(wh,\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nchanging color scheme\n\nparallelPlot(wh,\n             continuousCS = \"YlOrRd\",\n             rotateTitle = TRUE)\n\n\n\n\n\n\n\nwith histogram\n\nhistoVisibility &lt;- rep(TRUE, ncol(wh))\nparallelPlot(wh,\n             rotateTitle = TRUE,\n             histoVisibility = histoVisibility)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html",
    "title": "Hands-on_Exercise 6: Visualising and Analysing Time-Oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#overview",
    "title": "Hands-on_Exercise 6: Visualising and Analysing Time-Oriented Data",
    "section": "",
    "text": "By the end of this hands-on exercise you will be able create the followings data visualisation by using R packages:\n\nplotting a calender heatmap by using ggplot2 functions,\nplotting a cycle plot by using ggplot2 function,\nplotting a slopegraph\nplotting a horizon chart"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#getting-started",
    "title": "Hands-on_Exercise 6: Visualising and Analysing Time-Oriented Data",
    "section": "Getting Started",
    "text": "Getting Started\nImporting all the packages needed\n\npacman::p_load(scales, viridis, lubridate, ggthemes, gridExtra, readxl, knitr, data.table, CGPfunctions, ggHoriPlot, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-calendar-heatmap",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-calendar-heatmap",
    "title": "Hands-on_Exercise 6: Visualising and Analysing Time-Oriented Data",
    "section": "Plotting Calendar Heatmap",
    "text": "Plotting Calendar Heatmap\n\nplot a calender heatmap by using ggplot2 functions and extension,\nto write function using R programming,\nto derive specific date and time related field by using base R and lubridate packages\nto perform data preparation task by using tidyr and dplyr packages.\n\n\nImporting data\n\nattacks &lt;- read_csv(\"data/eventlog.csv\")\n\n\n\nExamining data structure\n\nkable(head(attacks))\n\n\n\n\ntimestamp\nsource_country\ntz\n\n\n\n\n2015-03-12 15:59:16\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:00:48\nFR\nEurope/Paris\n\n\n2015-03-12 16:02:26\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:02:38\nUS\nAmerica/Chicago\n\n\n2015-03-12 16:03:22\nCN\nAsia/Shanghai\n\n\n2015-03-12 16:03:45\nCN\nAsia/Shanghai\n\n\n\n\n\nthere are 3 columns:\n\ntime stamp\nsource country\nts: time zone of the ip address\n\n\n\nData preparation\nderiving weekday and hour of the day fields\n\nmake_hr_wkday &lt;- function(ts, sc, tz) {\n  real_times &lt;- ymd_hms(ts, \n                        tz = tz[1], \n                        quiet = TRUE)\n  dt &lt;- data.table(source_country = sc,\n                   wkday = weekdays(real_times),\n                   hour = hour(real_times))\n  return(dt)\n  }\n\nderiving the attacks tibble data frame\n\nwkday_levels &lt;- c('Saturday', 'Friday', \n                  'Thursday', 'Wednesday', \n                  'Tuesday', 'Monday', \n                  'Sunday')\n\nattacks &lt;- attacks %&gt;%\n  group_by(tz) %&gt;%\n  do(make_hr_wkday(.$timestamp, \n                   .$source_country, \n                   .$tz)) %&gt;% \n  ungroup() %&gt;% \n  mutate(wkday = factor(\n    wkday, levels = wkday_levels),\n    hour  = factor(\n      hour, levels = 0:23))\n\ndata preview after processing\n\nkable(head(attacks))\n\n\n\n\ntz\nsource_country\nwkday\nhour\n\n\n\n\nAfrica/Cairo\nBG\nSaturday\n20\n\n\nAfrica/Cairo\nTW\nSunday\n6\n\n\nAfrica/Cairo\nTW\nSunday\n8\n\n\nAfrica/Cairo\nCN\nSunday\n11\n\n\nAfrica/Cairo\nUS\nSunday\n15\n\n\nAfrica/Cairo\nCA\nMonday\n11\n\n\n\n\n\n\n\nBuilding the calendar heatmaps\n\ngrouped &lt;- attacks %&gt;% \n  count(wkday, hour) %&gt;% \n  ungroup() %&gt;%\n  na.omit()\n\nggplot(grouped, \n       aes(hour, \n           wkday, \n           fill = n)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") + \ncoord_equal() +\nscale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Attacks by weekday and time of day\") +\ntheme(axis.ticks = element_blank(),\n      plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6) )\n\n\n\n\n\n\n\n\n\na tibble data table called grouped is derived by aggregating the attack by wkday and hour fields.\na new field called n is derived by using group_by() and count() functions.\nna.omit() is used to exclude missing value.\ngeom_tile() is used to plot tiles (grids) at each x and y position. color and size arguments are used to specify the border color and line size of the tiles.\ntheme_tufte() of ggthemes package is used to remove unnecessary chart junk. To learn which visual components of default ggplot2 have been excluded, you are encouraged to comment out this line to examine the default plot.\ncoord_equal() is used to ensure the plot will have an aspect ratio of 1:1.\nscale_fill_gradient() function is used to creates a two colour gradient (low-high).\n\n\n\nMultiple calendar heatmap\n1: Deriving attack by country object\nIn order to identify the top 4 countries with the highest number of attacks, you are required to do the followings:\n\ncount the number of attacks by country,\ncalculate the percent of attackes by country, and\nsave the results in a tibble data frame.\n\n\nattacks_by_country &lt;- count(\n  attacks, source_country) %&gt;%\n  mutate(percent = percent(n/sum(n))) %&gt;%\n  arrange(desc(n))\n\n2: Preparing the tidy data frame for the 4 tops country\n\ntop4 &lt;- attacks_by_country$source_country[1:4]\ntop4_attacks &lt;- attacks %&gt;%\n  filter(source_country %in% top4) %&gt;%\n  count(source_country, wkday, hour) %&gt;%\n  ungroup() %&gt;%\n  mutate(source_country = factor(\n    source_country, levels = top4)) %&gt;%\n  na.omit()\n\n3: Plotting\n\nggplot(top4_attacks, \n       aes(hour, \n           wkday, \n           fill = n)) + \n  geom_tile(color = \"white\", \n          size = 0.1) + \n  theme_tufte(base_family = \"Helvetica\") + \n  coord_equal() +\n  scale_fill_gradient(name = \"# of attacks\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\n  facet_wrap(~source_country, ncol = 2) +\n  labs(x = NULL, y = NULL, \n     title = \"Attacks on top 4 countries by weekday and time of day\") +\n  theme(axis.ticks = element_blank(),\n        axis.text.x = element_text(size = 7),\n        plot.title = element_text(hjust = 0.5),\n        legend.title = element_text(size = 8),\n        legend.text = element_text(size = 6) )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-cycle-plot",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-cycle-plot",
    "title": "Hands-on_Exercise 6: Visualising and Analysing Time-Oriented Data",
    "section": "Plotting Cycle Plot",
    "text": "Plotting Cycle Plot\nwe are going to use arrivals by air dataset\n\nair &lt;- read_excel(\"data/arrivals_by_air.xlsx\")\n\n\nDeriving month and year field\nNext, two new fields called month and year are derived from Month-Year field.\n\nair$month &lt;- factor(month(air$`Month-Year`), \n                    levels=1:12, \n                    labels=month.abb, \n                    ordered=TRUE) \nair$year &lt;- year(ymd(air$`Month-Year`))\n\n\n\nTarget Country\nextracting data from vietnam after 2010\n\nVietnam &lt;- air %&gt;% \n  select(`Vietnam`, \n         month, \n         year) %&gt;%\n  filter(year &gt;= 2010)\n\n\n\nComputing Year Average arrival\n\nhline.data &lt;- Vietnam %&gt;% \n  group_by(month) %&gt;%\n  summarise(avgvalue = mean(`Vietnam`))\n\n\n\nPlotting the cycle plot\n\nggplot() + \n  geom_line(data=Vietnam,\n            aes(x=year, \n                y=`Vietnam`, \n                group=month), \n            colour=\"black\") +\n  geom_hline(aes(yintercept=avgvalue), \n             data=hline.data, \n             linetype=6, \n             colour=\"red\", \n             size=0.5) + \n  facet_grid(~month) +\n  labs(axis.text.x = element_blank(),\n       title = \"Visitor arrivals from Vietnam by air, Jan 2010-Dec 2019\") +\n  xlab(\"\") +\n  ylab(\"No. of Visitors\") +\n  theme_tufte(base_family = \"Helvetica\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-slopegraph",
    "href": "Hands-on_Ex/Hands-on_Ex6/Hands-on_Ex6.html#plotting-slopegraph",
    "title": "Hands-on_Exercise 6: Visualising and Analysing Time-Oriented Data",
    "section": "Plotting Slopegraph",
    "text": "Plotting Slopegraph\nIn this section you will learn how to plot a slopegraph by using R.\nBefore getting start, make sure that CGPfunctions has been installed and loaded onto R environment. Then, refer to Using newggslopegraph to learn more about the function. Lastly, read more about newggslopegraph() and its arguments by referring to this link.\n\nImporting the data\nwe are going to use rice data\n\nrice &lt;- read_csv(\"data/rice.csv\")\n\n\n\nplotting the slopegraph\n\nrice %&gt;% \n  mutate(Year = factor(Year)) %&gt;%\n  filter(Year %in% c(1961, 1980)) %&gt;%\n  newggslopegraph(Year, Yield, Country,\n                Title = \"Rice Yield of Top 11 Asian Counties\",\n                SubTitle = \"1961-1980\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html",
    "title": "Take-home_Exercise 3",
    "section": "",
    "text": "In this take home we are going to visualise and analyse mean temperature in Changi station in December 2023, 2013, 2003, 1993, 1983."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#overview",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#overview",
    "title": "Take-home_Exercise 3",
    "section": "",
    "text": "In this take home we are going to visualise and analyse mean temperature in Changi station in December 2023, 2013, 2003, 1993, 1983."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#getting-started",
    "title": "Take-home_Exercise 3",
    "section": "Getting Started",
    "text": "Getting Started\nImporting all the packages needed\n\npacman::p_load(tidyverse, ggthemes, plotly, ggdist)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#data-preparation",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#data-preparation",
    "title": "Take-home_Exercise 3",
    "section": "Data Preparation",
    "text": "Data Preparation\ncombining all the weather data across the years\n\nperiod1 &lt;- read_csv('data/DAILYDATA_S24_198312.csv')\nperiod2 &lt;- read_csv('data/DAILYDATA_S24_199312.csv')\nperiod3 &lt;- read_csv('data/DAILYDATA_S24_200312.csv')\nperiod4 &lt;- read_csv('data/DAILYDATA_S24_201312.csv')\nperiod5 &lt;- read_csv('data/DAILYDATA_S24_202312.csv')\n\n\nweather &lt;- rbind(period1,period2,period3,period4,period5)\n\nchanging the name of the variable and selecting the important data. furthermore, changing the data type fo day and year as categorical\n\nweather &lt;- weather %&gt;%\n  mutate (mean_temp = `Mean Temperature (°C)`) %&gt;%\n  select (Year, Day, mean_temp)\n\nweather$Day &lt;- as.factor(weather$Day)\nweather$Year &lt;- as.factor(weather$Year)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualisation",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#visualisation",
    "title": "Take-home_Exercise 3",
    "section": "Visualisation",
    "text": "Visualisation\n\nCalendar Heatmap\nplotting the calendar heatmap and including interactivity using ggplotly\n\np &lt;- ggplot(weather, \n       aes(Day, \n           Year, \n           fill = mean_temp)) + \ngeom_tile(color = \"white\", \n          size = 0.1) + \ntheme_tufte(base_family = \"Helvetica\") +\nscale_fill_gradient(name = \"Temperature\",\n                    low = \"sky blue\", \n                    high = \"dark blue\") +\nlabs(x = NULL, \n     y = NULL, \n     title = \"Temperature on December in Changi Station Across Years\") +\ntheme(plot.title = element_text(hjust = 0.5),\n      legend.title = element_text(size = 8),\n      legend.text = element_text(size = 6))\n\nggplotly(p)\n\n\n\n\n\nfrom the graph above we can see that the temperature in 2023 are higher than previous years. there are more darker shades of blue seen on the top part. However, seen from 1993 to 2013 there are not much movement of the temperature in between them. finally, in year 1983 the temperature are significantly lower as almost half of the day in December 1983 are on the lighter side of blue shade.\n\n\nLine Graph: Temperature Movement Every 10 Years\n\nPreparing Data\ncalculating the average temperature of December across years (1983,1993,2003,2013,2023)\n\nweather_mean &lt;- weather %&gt;%\n  group_by(Year) %&gt;%\n  mutate(temp = mean(mean_temp)) %&gt;% \n  select (Year, temp) %&gt;%\n  unique()\n\n\nhead(weather_mean)\n\n# A tibble: 5 × 2\n# Groups:   Year [5]\n  Year   temp\n  &lt;fct&gt; &lt;dbl&gt;\n1 1983   25.4\n2 1993   26.5\n3 2003   26.6\n4 2013   26.5\n5 2023   27.3\n\n\n\n\nVisualising Line Graph\ncreating a line chart to show the increase of average temperature between each year.\n\np &lt;- ggplot(weather_mean,\n       aes(Year, temp, group = 1)) +\n  geom_line() +\n  theme_minimal()\n\nggplotly(p)\n\n\n\n\n\nThis line chart shows similar analysis with the calendar heatmap. The line chart show a moderate increase of temperature in 1993 and 2023. And, temperature between 2013 and 1993 are not fluctuating.\n\n\n\nPoint Interval: Temperature Change per 10 Years\n\nData Preparation\ncalculating the average temperature change every 10 years from 1983 to 2023\n\nweather_changes &lt;- weather_mean %&gt;%\n  mutate(type = 1) %&gt;%\n  group_by(type) %&gt;%\n  mutate(change = temp - lag(temp, default = temp[1]))\n\n\n\nVisualising Point Interval\nplotting the error bar of temperature change every 10 years using confidence level of 0.65 , 0.95, and 0.99\n\nweather_changes %&gt;%\n  ggplot(aes(x = 1, \n             y = change)) +\n  stat_pointinterval(\n    .width = c(0.65,0.95,0.99)\n  ) +\n  labs(\n    title = \"Visualising confidence intervals of monthly mean temperature\",\n    subtitle = \"Mean Point + Multiple-interval plot\") +\n  scale_x_continuous(NULL, breaks = NULL) +\n  scale_y_continuous(breaks = seq(-.2,1.2,.2)) + \n  theme_minimal()\n\n\n\n\n\n\n\n\nthe findings in previous visualisation are also supported by the uncertainy here which tell us temperature fluctuation with different confidence interval:\n\n99% : -0.09 to 1.1\n95% : -0.08 to 1.05\n65% : -0.04 to 0.9"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#conclusion",
    "href": "Take-home_Ex/Take-home_Ex3/Take-home_Ex3.html#conclusion",
    "title": "Take-home_Exercise 3",
    "section": "Conclusion",
    "text": "Conclusion\nThe claim of temperature increasing by 1.4 to 4.6 degree Celcius cannot be support by our finding where we can 99% confidence that it would only be around -0.1 to 1.1 degree celcius temperate fluctuation. However, our data is using data for every 10 years. A different finding could be found by analysing other dataset or maybe another station/month of the year."
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html",
    "title": "In-Class_Exercise 6: Horizon Plot",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggHoriPlot, ggthemes)\n\n\n\n\naverp &lt;- read_csv(\"data/AVERP.csv\") %&gt;%\n  mutate(`Date` = dmy(`Date`))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#getting-started",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#getting-started",
    "title": "In-Class_Exercise 6: Horizon Plot",
    "section": "",
    "text": "pacman::p_load(tidyverse, ggHoriPlot, ggthemes)\n\n\n\n\naverp &lt;- read_csv(\"data/AVERP.csv\") %&gt;%\n  mutate(`Date` = dmy(`Date`))"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#plotting-horizon-plot",
    "href": "In-class_Ex/In-class_Ex6/In-class_Ex6.html#plotting-horizon-plot",
    "title": "In-Class_Exercise 6: Horizon Plot",
    "section": "Plotting Horizon plot",
    "text": "Plotting Horizon plot\n\naverp %&gt;% \n  filter(Date &gt;= \"2018-01-01\") %&gt;%\n  ggplot() +\n  geom_horizon(aes(x = Date, y=Values), \n               origin = \"midpoint\", \n               horizonscale = 6)+\n  facet_grid(`Consumer Items`~.) +\n    theme_few() +\n  scale_fill_hcl(palette = 'RdBu') +\n  theme(panel.spacing.y=unit(0, \"lines\"), strip.text.y = element_text(\n    size = 5, angle = 0, hjust = 0),\n    legend.position = 'none',\n    axis.text.y = element_blank(),\n    axis.text.x = element_text(size=7),\n    axis.title.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.ticks.y = element_blank(),\n    panel.border = element_blank()\n    ) +\n    scale_x_date(expand=c(0,0), date_breaks = \"3 month\", date_labels = \"%b%y\") +\n  ggtitle('Average Retail Prices of Selected Consumer Items (Jan 2018 to Dec 2022)')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html",
    "title": "Hands-on_Exercise 7a: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth is used to symbolise enumeration of units, such as countries, provinces, states, counties, or census units, using area patterns or graduated colors.\nIn this chapter we will try to plot choropleth maps using tmap package of R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#overview",
    "title": "Hands-on_Exercise 7a: Choropleth Mapping with R",
    "section": "",
    "text": "Choropleth is used to symbolise enumeration of units, such as countries, provinces, states, counties, or census units, using area patterns or graduated colors.\nIn this chapter we will try to plot choropleth maps using tmap package of R"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#getting-started",
    "title": "Hands-on_Exercise 7a: Choropleth Mapping with R",
    "section": "Getting Started",
    "text": "Getting Started\nhere are the packages we are going to use in this hands on:\n\ntmap, to plot choropleth map\nreadr, read delimited text file (tidyverse)\ntidyr, tidying data (tidyverse)\ndplyr, wrangling data (tidyverse)\nsf, handling geospatial data\n\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#importing-data-into-r",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#importing-data-into-r",
    "title": "Hands-on_Exercise 7a: Choropleth Mapping with R",
    "section": "Importing Data into R",
    "text": "Importing Data into R\nthere will be 2 data we are going 2 use for this hands on:\n\nmaster plan 2014 subzone boundary, to plot the geospatial data\nsingapore residents by planning area/subzone, age group, sex and type of dwelling, JUNE 2011-2020. to company the geospatial data\n\n\nImporting Geospatial data\nusing st_read from sf package to read geospatial data\n\nmpsz &lt;- st_read(dsn = \"data/geospatial\", \n                layer = \"MP14_SUBZONE_WEB_PL\")\n\n\nmpsz\n\n\n\nImporting Aspatial data\nreading the aspatial data\n\npopdata &lt;- read_csv(\"data/aspatial/respopagesextod2011to2020.csv\")\n\n\n\nData Preparation\nwe are going to grouped the population based on age:\n\nYOUNG: age group 0 to 4 until age groyup 20 to 24\nECONOMY ACTIVE: age group 25-29 until age group 60-64\nAGED: age group 65 and above\n\nwe are going to calculate another 2 columns, they are:\n\nTOTAL: all age group\nDEPENDENCY: the ratio between young and aged against economy active group\n\n\nData Wrangling\nwe are going to utilise 2 function to do the data wrangling:\n\npivot_wider() from tidyr\nmutate, filter, group_by, select from dplyr\n\n\npopdata2020 &lt;- popdata %&gt;%\n  filter(Time == 2020) %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(\n    names_from = AG,\n    values_from = POP\n  ) %&gt;%\n  mutate (`YOUNG` = rowSums(.[3:6])+rowSums(.[12]),\n          `ECONOMY ACTIVE` = rowSums(.[7:11])+rowSums(.[13:15]),\n          `AGED`=rowSums(.[16:21]),\n          `TOTAL`=rowSums(.[3:21])) %&gt;%\n  mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\n\n\nJoining the attribute data and geospatial data\nchanging the pa and sz field to all upper case and remove all row where economy active population is 0 to prevent plotting NaN later on\n\npopdata2020 &lt;- popdata2020 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = funs(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\ndoing a left join between the geospatial data and the attribute (aspatial) data by subzone name (SZ)\n\nmpsz_pop2020 &lt;- left_join(mpsz, popdata2020,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nwriting the combined dataset to an rds to easier read next time without repeating all the wrangling\n\nwrite_rds(mpsz_pop2020, \"data/rds/mpszpop2020.rds\")\n\nreading the rds back\n\nmpsz_pop2020 &lt;- read_rds(\"data/rds/mpszpop2020.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#choropleth-mapping-geospatial-data-using-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#choropleth-mapping-geospatial-data-using-tmap",
    "title": "Hands-on_Exercise 7a: Choropleth Mapping with R",
    "section": "Choropleth mapping Geospatial Data Using tmap",
    "text": "Choropleth mapping Geospatial Data Using tmap\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\nqtm method\ntmap_mode(‘plot’) to make the plot to static\nthe fill is to map the attribute with depedency\n\n#turn off the interactivity of tmap\ntmap_mode(\"plot\")\n\nqtm(mpsz_pop2020,\n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\n\ntm elements method\nthis way we are going to add layer by layer to the plot\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          title = \"Dependency Ratio\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nnext we are going to explore tm elements\n\ndrawing a base map\n\ntm_shape(mpsz_pop2020) +\n  tm_polygons()\n\n\n\n\n\n\n\n\n\n\nadding fill by tm_polygon\n\ntm_shape(mpsz_pop2020)+\n  tm_polygons(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\nThe default interval binning used to draw the choropleth map is called \"pretty\". A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, Missing value will be shaded in grey.\n\n\n\ntm fill and tm border\ndifferent with polygon tm fill wont give use the border between geospatial area\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(lwd = 0.1,  alpha = 1)\n\n\n\n\n\n\n\n\n\ncol = border colour,\nlwd = border line width. The default is 1, and\nlty = border line type. The default is \"solid\".\n\n\n\n\nData Classification method of heat map\nthere a some data classification that we can use such as fixed, sd, equal, pretty, quantile, kmeans, hclust, bclust, fisher, and jenk. the default style is pretty\njenks\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"jenks\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nequal\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nother than built in we also can create our own style by using custom break\n\nsummary(mpsz_pop2020$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1111  0.7147  0.7866  0.8585  0.8763 19.0000      92 \n\n\nsince we can see majority of the data are higher that 0.71 we can create a custom break using breaks attribute in tm_fill\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00)) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nColour Scheme\nthere are ways to color the choropleth plot\n\n1. ColourBrewer\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          n = 6,\n          style = \"quantile\",\n          palette = \"Blues\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nwe can add ‘-’ to the colour to reverse the shading from dark to light instead of other way around\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n\nMap Layouts\nMap layout refers to the combination of all map elements into a cohensive map. Map elements include among others the objects to be mapped, the title, the scale bar, the compass, margins and aspects ratios. Colour settings and data classification methods covered in the previous section relate to the palette and break-points are used to affect how the map looks.\n\n1. Map legend\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n2. Map style\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"-Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\n\n\n\n\n\n\n\n\n\n3. Cartographic Furniture\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nTo reset the default style, refer to the code chunk below.\n\ntmap_style(\"white\")\n\n\n\n\nDrawing multiple choropleth map\nIn tmap, small multiple maps can be plotted in three ways:\n\nby assigning multiple values to at least one of the asthetic arguments,\nby defining a group-by variable in tm_facets(), and\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n1. multiple fill\n\ntm_shape(mpsz_pop2020)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\n\n\n\n\n\n\n\n\ntm_shape(mpsz_pop2020)+ \n  tm_polygons(c(\"DEPENDENCY\",\"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\",\"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\n2. tm facets\n\ntm_shape(mpsz_pop2020) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=FALSE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\n3. tmap arrange\n\nyoungmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(mpsz_pop2020)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nMappping Spatial Object Meeting a Selection Criterion\n\ntm_shape(mpsz_pop2020[mpsz_pop2020$REGION_N==\"CENTRAL REGION\", ])+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Blues\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7a.html#reference",
    "title": "Hands-on_Exercise 7a: Choropleth Mapping with R",
    "section": "Reference",
    "text": "Reference\n\n21.5.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)\n\n\n\n21.5.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features\n\n\n\n21.5.3 Data wrangling\n\ndplyr\nTidy data\ntidyr: Easily Tidy Data with 'spread()' and 'gather()' Functions"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#overview",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "",
    "text": "Proportional symbol maps (also known as graduate symbol maps) are a class of maps that use the visual variable of size to represent differences in the magnitude of a discrete, abruptly changing phenomenon, e.g. counts of people. Like choropleth maps, you can create classed or unclassed versions of these maps. The classed ones are known as range-graded or graduated symbols, and the unclassed are called proportional symbols, where the area of the symbols are proportional to the values of the attribute being mapped. In this hands-on exercise, you will learn how to create a proportional symbol map showing the number of wins by Singapore Pools’ outlets using an R package called tmap."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#getting-started",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Getting Started",
    "text": "Getting Started\n\nImport Packages\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\nImport data\nimporting data of sg pools outlet and branch\n\nsgpools &lt;- read_csv(\"data/aspatial/SGPools_svy21.csv\")\n\nthe data set contain the name, address, Xcoord and Ycoord, outlet type, and winning from the branch.\nthe x and y coord are the column containing the coordinate location of the outlet and branch in the map.\nThey are in Singapore SVY21 Projected Coordinates System.\n\nsgpools\n\n# A tibble: 306 × 7\n   NAME           ADDRESS POSTCODE XCOORD YCOORD `OUTLET TYPE` `Gp1Gp2 Winnings`\n   &lt;chr&gt;          &lt;chr&gt;      &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Mar… 2 Bayf…    18972 30842. 29599. Branch                        5\n 2 Livewire (Res… 26 Sen…    98138 26704. 26526. Branch                       11\n 3 SportsBuzz (K… Lotus …   738078 20118. 44888. Branch                        0\n 4 SportsBuzz (P… 1 Sele…   188306 29777. 31382. Branch                       44\n 5 Prime Serango… Blk 54…   552542 32239. 39519. Branch                        0\n 6 Singapore Poo… 1A Woo…   731001 21012. 46987. Branch                        3\n 7 Singapore Poo… Blk 64…   370064 33990. 34356. Branch                       17\n 8 Singapore Poo… Blk 88…   370088 33847. 33976. Branch                       16\n 9 Singapore Poo… Blk 30…   540308 33910. 41275. Branch                       21\n10 Singapore Poo… Blk 20…   560202 29246. 38943. Branch                       25\n# ℹ 296 more rows\n\n\n\n\nData Wrangling: creating sf data frame from aspatial data frame\nThe data that was imported are not in the form of geospatial where the coordinate are not together and dont have the geometry needed to plot a geospatial map. therefore, we are going to create the geometry attribute from the x and y coord given and change the coordinate used from svy21 to epsg 3414.\n\nsgpools_sf &lt;- st_as_sf(sgpools, \n                       coords = c(\"XCOORD\", \"YCOORD\"),\n                       crs= 3414)\n\n\nThe coords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\nThe crs argument required you to provide the coordinates system in epsg format. EPSG: 3414 is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by refering to epsg.io.\n\n\nlist(sgpools_sf)\n\n[[1]]\nSimple feature collection with 306 features and 5 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 7844.194 ymin: 26525.7 xmax: 45176.57 ymax: 47987.13\nProjected CRS: SVY21 / Singapore TM\n# A tibble: 306 × 6\n   NAME                         ADDRESS POSTCODE `OUTLET TYPE` `Gp1Gp2 Winnings`\n * &lt;chr&gt;                        &lt;chr&gt;      &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt;\n 1 Livewire (Marina Bay Sands)  2 Bayf…    18972 Branch                        5\n 2 Livewire (Resorts World Sen… 26 Sen…    98138 Branch                       11\n 3 SportsBuzz (Kranji)          Lotus …   738078 Branch                        0\n 4 SportsBuzz (PoMo)            1 Sele…   188306 Branch                       44\n 5 Prime Serangoon North        Blk 54…   552542 Branch                        0\n 6 Singapore Pools Woodlands C… 1A Woo…   731001 Branch                        3\n 7 Singapore Pools 64 Circuit … Blk 64…   370064 Branch                       17\n 8 Singapore Pools 88 Circuit … Blk 88…   370088 Branch                       16\n 9 Singapore Pools Anchorvale … Blk 30…   540308 Branch                       21\n10 Singapore Pools Ang Mo Kio … Blk 20…   560202 Branch                       25\n# ℹ 296 more rows\n# ℹ 1 more variable: geometry &lt;POINT [m]&gt;\n\n\nnow we have a new geometry column"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#drawing-proportional-symbol-map",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#drawing-proportional-symbol-map",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Drawing Proportional Symbol Map",
    "text": "Drawing Proportional Symbol Map\nfirst is to set the map interactive\n\ntmap_mode(\"view\")\n\n\nplotting interactive point to the map\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = 1,\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\nmake the interactive point proportional towards the winning\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"red\",\n           size = \"Gp1Gp2 Winnings\",\n           border.col = \"black\",\n           border.lwd = 1)\n\n\n\n\n\n\n\nseperating the color between outlet and branch\n\ntm_shape(sgpools_sf)+\ntm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1)\n\n\n\n\n\n\n\nusing facet for different types\n\ntm_shape(sgpools_sf) +\n  tm_bubbles(col = \"OUTLET TYPE\", \n          size = \"Gp1Gp2 Winnings\",\n          border.col = \"black\",\n          border.lwd = 1) +\n  tm_facets(by= \"OUTLET TYPE\",\n            nrow = 1,\n            sync = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\nswitch back the map mode to plot\n\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#reference",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#reference",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "Reference",
    "text": "Reference"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#all-about-tmap-package",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#all-about-tmap-package",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "27.1 All about tmap package",
    "text": "27.1 All about tmap package\n\ntmap: Thematic Maps in R\ntmap\ntmap: get started!\ntmap: changes in version 2.0\ntmap: creating thematic maps in a flexible way (useR!2015)\nExploring and presenting maps with tmap (useR!2017)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#geospatial-data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7b.html#geospatial-data-wrangling",
    "title": "Hands-on Exercise 7b: Visualising Geospatial Point Data",
    "section": "27.2 Geospatial data wrangling",
    "text": "27.2 Geospatial data wrangling\n\nsf: Simple Features for R\nSimple Features for R: StandardizedSupport for Spatial Vector Data\nReading, Writing and Converting Simple Features"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html",
    "title": "Hands-on Exercise 7c: Anlytical Mapping",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#overview",
    "title": "Hands-on Exercise 7c: Anlytical Mapping",
    "section": "",
    "text": "In this in-class exercise, you will gain hands-on experience on using appropriate R methods to plot analytical maps.\n\n\n\nBy the end of this in-class exercise, you will be able to use appropriate functions of tmap and tidyverse to perform the following tasks:\n\nImporting geospatial data in rds format into R environment.\nCreating cartographic quality choropleth maps by using appropriate tmap functions.\nCreating rate map\nCreating percentile map\nCreating boxmap"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#getting-started",
    "title": "Hands-on Exercise 7c: Anlytical Mapping",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting packages\n\npacman::p_load(sf, tmap, tidyverse)\n\n\n\nImporting data\n\nNGA_wp &lt;- read_rds('data/rds/NGA_wp.rds')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#basing-choropleth-mapping",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#basing-choropleth-mapping",
    "title": "Hands-on Exercise 7c: Anlytical Mapping",
    "section": "Basing Choropleth Mapping",
    "text": "Basing Choropleth Mapping\n\nVisualising distribution of non functional water point\n\np_nonf &lt;-tm_shape(NGA_wp)+\n  tm_fill(\"wp_nonfunctional\", \n          n = 10,\n          style = \"equal\", \n          palette = \"Blues\",\n          title = \"wp_nonfunctional\") +\n  tm_layout(main.title = \"Distribution of non functional water point by LGAs\",\n            legend.outside = FALSE) +\n  tm_borders(lwd = 0.1,\n             alpha = 1)\n\np_nonf\n\n\n\n\n\n\n\n\n\np1 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"wp_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of functional water point by LGAs\",\n            legend.outside = FALSE)\n\n\np2 &lt;- tm_shape(NGA_wp) +\n  tm_fill(\"total_wp\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"Distribution of total water point by LGAs\",\n            legend.outside = FALSE)\n\n\ntmap_arrange(p2, p1, nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#choropleth-map-for-rates",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#choropleth-map-for-rates",
    "title": "Hands-on Exercise 7c: Anlytical Mapping",
    "section": "Choropleth map for rates",
    "text": "Choropleth map for rates\nIn much of our readings we have now seen the importance to map rates rather than counts of things, and that is for the simple reason that water points are not equally distributed in space. That means that if we do not account for how many water points are somewhere, we end up mapping total water point size rather than our topic of interest.\n\nDeriving pct of functional and non functional water point per total water point\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  mutate(pct_functional = wp_functional/total_wp) %&gt;%\n  mutate(pct_nonfunctional = wp_nonfunctional/total_wp)\n\n\n\nplotting map of rate\n\ntm_shape(NGA_wp) +\n  tm_fill(\"pct_functional\",\n          n = 10,\n          style = \"equal\",\n          palette = \"Blues\") +\n  tm_borders(lwd = 0.1,\n             alpha = 1) +\n  tm_layout(main.title = \"rate map of functional water point by LGAs\",\n            legend.outside = FALSE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#extreme-values-maps",
    "href": "Hands-on_Ex/Hands-on_Ex7/Hands-on_Ex7c.html#extreme-values-maps",
    "title": "Hands-on Exercise 7c: Anlytical Mapping",
    "section": "Extreme values maps",
    "text": "Extreme values maps\nExtreme value maps are variations of common choropleth maps where the classification is designed to highlight extreme values at the lower and upper end of the scale, with the goal of identifying outliers. These maps were developed in the spirit of spatializing EDA, i.e., adding spatial features to commonly used approaches in non-spatial EDA (Anselin 1994).\n\nPercentile map\nThe percentile map is a special type of quantile map with six specific categories: 0-1%,1-10%, 10-50%,50-90%,90-99%, and 99-100%. The corresponding breakpoints can be derived by means of the base R quantile command, passing an explicit vector of cumulative probabilities as c(0,.01,.1,.5,.9,.99,1). Note that the begin and endpoint need to be included.\n\ndata preparation\n\nNGA_wp &lt;- NGA_wp %&gt;%\n  drop_na()\n\nfinding out values of each percentile\n\npercent &lt;- c(0,.01,.1,.5,.9,.99,1)\nvar &lt;- NGA_wp[\"pct_functional\"] %&gt;%\n  st_set_geometry(NULL)\nquantile(var[,1], percent)\n\n       0%        1%       10%       50%       90%       99%      100% \n0.0000000 0.0000000 0.2169811 0.4791667 0.8611111 1.0000000 1.0000000 \n\n\n\n\nBenefits of writing function\nWriting a function has three big advantages over using copy-and-paste:\n\nYou can give a function an evocative name that makes your code easier to understand.\nAs requirements change, you only need to update code in one place, instead of many.\nYou eliminate the chance of making incidental mistakes when you copy and paste (i.e. updating a variable name in one place, but not in another).\n\n\n\nCreating get.var function\n\narguments:\n\nvname: variable name (as character, in quotes)\ndf: name of sf data frame\n\nreturns:\n\nv: vector with values (without a column name)\n\n\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% \n    st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\npercentile mapping function\n\npercentmap &lt;- function(vnam, df, legtitle=NA, mtitle=\"Percentile Map\"){\n  percent &lt;- c(0,.01,.1,.5,.9,.99,1)\n  var &lt;- get.var(vnam, df)\n  bperc &lt;- quantile(var, percent)\n  tm_shape(df) +\n  tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,\n             title=legtitle,\n             breaks=bperc,\n             palette=\"Blues\",\n          labels=c(\"&lt; 1%\", \"1% - 10%\", \"10% - 50%\", \"50% - 90%\", \"90% - 99%\", \"&gt; 99%\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"right\",\"bottom\"))\n}\n\n\n\ntesting the percentile mapping function\n\npercentmap(\"total_wp\", NGA_wp)\n\n\n\n\n\n\n\n\n\n\n\nBox map\n\nggplot(data = NGA_wp,\n       aes(x = \"\",\n           y = wp_nonfunctional)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDisplaying summary statistics on a choropleth map by using the basic principles of boxplot.\nTo create a box map, a custom breaks specification will be used. However, there is a complication. The break points for the box map vary depending on whether lower or upper outliers are present.\n\n\nboxbreaks function\n\narguments:\n\nv: vector with observations\nmult: multiplier for IQR (default 1.5)\n\nreturns:\n\nbb: vector with 7 break points compute quartile and fences\n\n\n\nboxbreaks &lt;- function(v,mult=1.5) {\n  qv &lt;- unname(quantile(v))\n  iqr &lt;- qv[4] - qv[2]\n  upfence &lt;- qv[4] + mult * iqr\n  lofence &lt;- qv[2] - mult * iqr\n  # initialize break points vector\n  bb &lt;- vector(mode=\"numeric\",length=7)\n  # logic for lower and upper fences\n  if (lofence &lt; qv[1]) {  # no lower outliers\n    bb[1] &lt;- lofence\n    bb[2] &lt;- floor(qv[1])\n  } else {\n    bb[2] &lt;- lofence\n    bb[1] &lt;- qv[1]\n  }\n  if (upfence &gt; qv[5]) { # no upper outliers\n    bb[7] &lt;- upfence\n    bb[6] &lt;- ceiling(qv[5])\n  } else {\n    bb[6] &lt;- upfence\n    bb[7] &lt;- qv[5]\n  }\n  bb[3:5] &lt;- qv[2:4]\n  return(bb)\n}\n\n\n\nget.var function\n\nget.var &lt;- function(vname,df) {\n  v &lt;- df[vname] %&gt;% st_set_geometry(NULL)\n  v &lt;- unname(v[,1])\n  return(v)\n}\n\n\n\ntesting the box break function\n\nvar &lt;- get.var(\"wp_nonfunctional\", NGA_wp) \nboxbreaks(var)\n\n[1] -56.5   0.0  14.0  34.0  61.0 131.5 278.0\n\n\n\n\nboxmap function\n\nboxmap &lt;- function(vnam, df, \n                   legtitle=NA,\n                   mtitle=\"Box Map\",\n                   mult=1.5){\n  var &lt;- get.var(vnam,df)\n  bb &lt;- boxbreaks(var)\n  tm_shape(df) +\n    tm_polygons() +\n  tm_shape(df) +\n     tm_fill(vnam,title=legtitle,\n             breaks=bb,\n             palette=\"Blues\",\n          labels = c(\"lower outlier\", \n                     \"&lt; 25%\", \n                     \"25% - 50%\", \n                     \"50% - 75%\",\n                     \"&gt; 75%\", \n                     \"upper outlier\"))  +\n  tm_borders() +\n  tm_layout(main.title = mtitle, \n            title.position = c(\"left\",\n                               \"top\"))\n}\n\n\ntmap_mode(\"plot\")\nboxmap(\"wp_nonfunctional\", NGA_wp)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#overview",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "",
    "text": "In this hands-on exercise, you will learn how to model, analyse and visualise network data using R.\nBy the end of this hands-on exercise, you will be able to:\n\ncreate graph object data frames, manipulate them using appropriate functions of dplyr, lubridate, and tidygraph,\nbuild network graph visualisation using appropriate functions of ggraph,\ncompute network geometrics using tidygraph,\nbuild advanced graph visualisation by incorporating the network geometrics, and\nbuild interactive network visualisation using visNetwork package."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#getting-started",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Getting Started",
    "text": "Getting Started\n\nInstalling and importing package\n\npacman::p_load(igraph, tidygraph, ggraph, \n               visNetwork, lubridate, clock,\n               tidyverse, graphlayouts)\n\n\n\nImporting data\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\nglimpse(GAStech_edges)\n\nRows: 9,063\nColumns: 8\n$ source      &lt;dbl&gt; 43, 43, 44, 44, 44, 44, 44, 44, 44, 44, 44, 44, 26, 26, 26…\n$ target      &lt;dbl&gt; 41, 40, 51, 52, 53, 45, 44, 46, 48, 49, 47, 54, 27, 28, 29…\n$ SentDate    &lt;chr&gt; \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\", \"6/1/2014\"…\n$ SentTime    &lt;time&gt; 08:39:00, 08:39:00, 08:58:00, 08:58:00, 08:58:00, 08:58:0…\n$ Subject     &lt;chr&gt; \"GT-SeismicProcessorPro Bug Report\", \"GT-SeismicProcessorP…\n$ MainSubject &lt;chr&gt; \"Work related\", \"Work related\", \"Work related\", \"Work rela…\n$ sourceLabel &lt;chr&gt; \"Sven.Flecha\", \"Sven.Flecha\", \"Kanon.Herrero\", \"Kanon.Herr…\n$ targetLabel &lt;chr&gt; \"Isak.Baza\", \"Lucas.Alcazar\", \"Felix.Resumir\", \"Hideki.Coc…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#data-wrangling",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#data-wrangling",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Data Wrangling",
    "text": "Data Wrangling\n\ndmy() transforms the SentDate to Date data type.\nwday() returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keep the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of wday() will save in this newly created field.\nthe values in the Weekday field are in ordinal scale.\n\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n    summarise(Weight = n()) %&gt;%\n  filter(source!=target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()\n\n\nglimpse(GAStech_edges_aggregated)\n\nRows: 1,372\nColumns: 4\n$ source  &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,…\n$ target  &lt;dbl&gt; 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6,…\n$ Weekday &lt;ord&gt; Sunday, Monday, Tuesday, Wednesday, Friday, Sunday, Monday, Tu…\n$ Weight  &lt;int&gt; 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5, 2, 3, 4, 6, 5,…"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#creating-network-object-using-tidygraph",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#creating-network-object-using-tidygraph",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Creating network object using tidygraph",
    "text": "Creating network object using tidygraph\nIn this section, you will learn how to create a graph data model by using tidygraph package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. tidygraph provides a way to switch between the two tables and provides dplyr verbs for manipulating them. Furthermore it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.\nBefore getting started, you are advised to read these two articles:\n\nIntroducing tidygraph\ntidygraph 1.1 - A tidy hope\n\n\nThe tbl_graph object\nTwo functions of tidygraph package can be used to create network objects, they are:\n\ntbl_graph() creates a tbl_graph network object from nodes and edges data.\nas_tbl_graph() converts network data and objects to a tbl_graph network. Below are network data and objects supported by as_tbl_graph()\n\na node data.frame and an edge data.frame,\ndata.frame, list, matrix from base,\nigraph from igraph,\nnetwork from network,\ndendrogram and hclust from stats,\nNode from data.tree,\nphylo and evonet from ape, and\ngraphNEL, graphAM, graphBAM from graph (in Bioconductor).\n\n\n\n\nThe dplyr verbs in tidygraph\n\nactivate() verb from tidygraph serves as a switch between tibbles for nodes and edges. All dplyr verbs applied to tbl_graph object are applied to the active tibble.\n\n\n\nIn the above the .N() function is used to gain access to the node data while manipulating the edge data. Similarly .E() will give you the edge data and .G() will give you the tbl_graph object itself.\n\n\n\nUsing tbl_graph() to build tidygraph data model.\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated, \n                           directed = TRUE)\n\n\n\nReviewing the output tidygraph's graph object\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\n\n\nReviewing the output tidygraph's graph object\n\nThe output above reveals that GAStech_graph is a tbl_graph object with 54 nodes and 4541 edges.\nThe command also prints the first six rows of \"Node Data\" and the first three of \"Edge Data\".\nIt states that the Node Data is active. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.\n\n\n\nChanging Active Object\n\nGAStech_graph %&gt;%\n  activate(edges) %&gt;%\n  arrange(desc(Weight))\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Edge Data: 1,372 × 4 (active)\n    from    to Weekday   Weight\n   &lt;int&gt; &lt;int&gt; &lt;ord&gt;      &lt;int&gt;\n 1    40    41 Saturday      13\n 2    41    43 Monday        11\n 3    35    31 Tuesday       10\n 4    40    41 Monday        10\n 5    40    43 Monday        10\n 6    36    32 Sunday         9\n 7    40    43 Saturday       9\n 8    41    40 Monday         9\n 9    19    15 Wednesday      8\n10    35    38 Tuesday        8\n# ℹ 1,362 more rows\n#\n# Node Data: 54 × 4\n     id label           Department     Title           \n  &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;          &lt;chr&gt;           \n1     1 Mat.Bramar      Administration Assistant to CEO\n2     2 Anda.Ribera     Administration Assistant to CFO\n3     3 Rachel.Pantanal Administration Assistant to CIO\n# ℹ 51 more rows"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#plotting-static-network-graphs-with-ggraph-package",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#plotting-static-network-graphs-with-ggraph-package",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Plotting Static Network Graphs with ggraph package",
    "text": "Plotting Static Network Graphs with ggraph package\nggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.\nAs in all network graph, there are three main aspects to a ggraph's network graph, they are:\n\nnodes,\nedges and\nlayouts.\n\nFor a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.\n\nPlotting a basic network graph\nThe code chunk below uses ggraph(), geom-edge_link() and geom_node_point() to plot a network graph by using GAStech_graph. Before your get started, it is advisable to read their respective reference guide at least once.\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\n\nChanging the default network graph theme\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nChanging the coloring of the plot\n\ng &lt;- ggraph(GAStech_graph) + \n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = 'grey10',\n                text_colour = 'white')\n\n\n\n\n\n\n\n\n\n\nWorking with ggraph’s layouts\nggraph support many layout for standard used, they are: star, circle, nicely (default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by ggraph().\n\n\n\n\nFruchterman and Reingold layout\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nlayout argument is used to define the layout to be used.\n\n\n\nModifying network nodes\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department, \n                      size = 3))\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\ngeom_node_point is equivalent in functionality to geo_point of ggplot2. It allows for simple plotting of nodes in different shapes, colours and sizes. In the codes chnuks above colour and size are used.\n\n\n\nModifying edge\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\ngeom_edge_link draws edges in the simplest way - as straight lines between the start and end nodes. But, it can do more that that. In the example above, argument widthis used to map the width of the line in proportional to the Weight attribute and argument alpha is used to introduce opacity on the line."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#creating-facet-graphs",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#creating-facet-graphs",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Creating facet graphs",
    "text": "Creating facet graphs\nAnother very useful feature of ggraph is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.\nThere are three functions in ggraph to implement faceting, they are:\n\nfacet_nodes() whereby edges are only draw in a panel if both terminal nodes are present here,\nfacet_edges() whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and\nfacet_graph() faceting on two variables simultaneously.\n\n\nworking with facet_edges()\nIn the code chunk below, facet_edges() is used. Before getting started, it is advisable for you to read it's reference guide at least once.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nWorking with facet_edges()\nThe code chunk below uses theme() to change the position of the legend.\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2) +\n  theme(legend.position = 'bottom')\n  \ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\n\nA framed facet graph\n\nset_graph_style() \n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_edges(~Weekday) +\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')\n\n\n\n\n\n\n\n\n\n\nWorking with facet_nodes()\n\nset_graph_style()\n\ng &lt;- ggraph(GAStech_graph, \n            layout = \"nicely\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department), \n                  size = 2)\n  \ng + facet_nodes(~Department)+\n  th_foreground(foreground = \"grey80\",  \n                border = TRUE) +\n  theme(legend.position = 'bottom')"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#network-metrics-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#network-metrics-analysis",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Network Metrics Analysis",
    "text": "Network Metrics Analysis\n\nComputing centrality indices\nCentrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to Chapter 7: Actor Prominence of A User's Guide to Network Analysis in R to gain better understanding of theses network measures.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department,\n            size=betweenness_centrality))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nthe algorithm used, on the other hand, is the centrality_betweenness() of tidygraph.\n\n\n\nVisualising network metrics\n\ng &lt;- GAStech_graph %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = Department, \n                      size = centrality_betweenness()))\ng + theme_graph()\n\n\n\n\n\n\n\n\n\n\nVisualising community\ntidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including Edge-betweenness (group_edge_betweenness), Leading eigenvector (group_leading_eigen), Fast-greedy (group_fast_greedy), Louvain (group_louvain), Walktrap (group_walktrap), Label propagation (group_label_prop), InfoMAP (group_infomap), Spinglass (group_spinglass), and Optimal (group_optimal). Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this link to find out more about community detection functions provided by tidygraph,\nIn the code chunk below group_edge_betweenness() is used.\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(community = as.factor(group_edge_betweenness(weights = Weight, directed = TRUE))) %&gt;%\n  ggraph(layout = \"fr\") + \n  geom_edge_link(aes(width=Weight), \n                 alpha=0.2) +\n  scale_edge_width(range = c(0.1, 5)) +\n  geom_node_point(aes(colour = community))  \n\ng + theme_graph()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#building-interactive-network-graph-with-visnetwork",
    "href": "Hands-on_Ex/Hands-on_Ex8/Hands-on_Ex8.html#building-interactive-network-graph-with-visnetwork",
    "title": "Hands-on Exercise 8: Modelling, Visualising and Analysing Network Data with R",
    "section": "Building Interactive Network Graph with visNetwork",
    "text": "Building Interactive Network Graph with visNetwork\n\nvisNetwork() is a R package for network visualization, using vis.js javascript library.\nvisNetwork() function uses a nodes list and edges list to create an interactive graph.\n\nThe nodes list must include an \"id\" column, and the edge list must have \"from\" and \"to\" columns.\nThe function also plots the labels for the nodes, using the names of the actors from the \"label\" column in the node list.\n\nThe resulting graph is fun to play around with.\n\nYou can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.\nYou can also zoom in and out on the plot and move it around to re-center it.\n\n\n\nData Preparation\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  left_join(GAStech_nodes, by = c(\"sourceLabel\" = \"label\")) %&gt;%\n  rename(from = id) %&gt;%\n  left_join(GAStech_nodes, by = c(\"targetLabel\" = \"label\")) %&gt;%\n  rename(to = id) %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(from, to) %&gt;%\n    summarise(weight = n()) %&gt;%\n  filter(from!=to) %&gt;%\n  filter(weight &gt; 1) %&gt;%\n  ungroup()\n\n\n\nPlotting the first intereactive network graph\n\nvisNetwork(GAStech_nodes, \n           GAStech_edges_aggregated)\n\n\n\n\n\n\n\nWorking with layout\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") \n\n\n\n\n\n\n\nWorking with visual attributes - Nodes\nvisNetwork() looks for a field called \"group\" in the nodes object and colour the nodes according to the values of the group field.\nThe code chunk below rename Department field to group.\n\nGAStech_nodes &lt;- GAStech_nodes %&gt;%\n  rename(group = Department) \n\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\nWorking with visual attributes - Edges\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visEdges(arrows = \"to\", \n           smooth = list(enabled = TRUE, \n                         type = \"curvedCW\")) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)\n\n\n\n\n\n\n\nInteractivity\n\nvisNetwork(GAStech_nodes,\n           GAStech_edges_aggregated) %&gt;%\n  visIgraphLayout(layout = \"layout_with_fr\") %&gt;%\n  visOptions(highlightNearest = TRUE,\n             nodesIdSelection = TRUE) %&gt;%\n  visLegend() %&gt;%\n  visLayout(randomSeed = 123)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "In this take home exercise we are going to prototype plots that are going to be used for the final project ‘outlook of Singapore economic’. Here, we are going to focus on 2 dataset:\n\nForeign Direct Investment: By Industry\nForeign Direct Investment: By Region and Country\n\nFurthermore, we are going to separate the plotting into 2 type:\n\nHistorical\nForecast (nowcasting)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#playground",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#playground",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "pacman::p_load(tidyverse, dfms, fable, tsibble, tsibbledata, zoo, feasts, urca)\n\n\ndata &lt;- read_csv(\"data/Retail_Sales_Value.csv\")\n\n\ndata &lt;- data %&gt;% \n  mutate(time = my(time)) %&gt;% \n  mutate(time = yearmonth(time)) %&gt;%\n  as_tsibble()\n\n\ndata %&gt;%\n  model(\n    ets = ETS(box_cox(value, 0.3)),\n    arima = ARIMA(log(value)),\n    snaive = SNAIVE(value)\n  ) %&gt;%\n  forecast(h = \"2 years\") %&gt;% \n  autoplot(filter(data, year(time) &gt; 2000), level = NULL)\n\n\n\n\n\n\n\n\n\naus_ret &lt;- aus_retail\n\n\nnowcasted_aus &lt;- aus_retail %&gt;%\n  filter(\n    State %in% c(\"New South Wales\", \"Victoria\"),\n    Industry == \"Department stores\"\n  ) %&gt;% \n  model(\n    ets = ETS(box_cox(Turnover, 0.3)),\n    arima = ARIMA(log(Turnover)),\n    snaive = SNAIVE(Turnover)\n  ) %&gt;%\n  forecast(h = \"2 years\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#start-here",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#start-here",
    "title": "Take-home Exercise 4",
    "section": "Start Here",
    "text": "Start Here\n\npacman::p_load(tidyverse, forecast)\n\n\ndata &lt;- read_csv('data/FDI_Industry.csv')\n\n\ninput_cat &lt;- \"Financial & Insurance Services\"\ninput_h &lt;- 5\n\ndata_ts &lt;- data %&gt;%\n  select(input_cat) %&gt;%\n  as.ts()\n\n\nmodel &lt;- auto.arima(data_ts)\nforecasted_values &lt;- forecast(model, h = input_h)\nplot(forecasted_values)\n\n\n\n\n\n\n\n\n\nforecasted &lt;- as.tibble(forecasted_values$mean) \nforecasted$year &lt;- seq(max(data$Year)+1, max(data$Year)+input_h,1) \nforecasted$upper &lt;- as.tibble(forecasted_values$upper)\nforecasted$lower &lt;- as.tibble(forecasted_values$lower)\n\nforecasted &lt;- forecasted %&gt;%\n  mutate(mean = x)\n\n\npivoted &lt;- data %&gt;%\n  pivot_longer(!Year, names_to = \"Industry\", values_to = \"Value\")\n\n\npivoted %&gt;% \n  filter(Industry != \"Total\") %&gt;%\nggplot() +\n  geom_line(aes(x = Year, y = Value, color = Industry)) +\n  geom_line(data = forecasted, aes(x = year, y = mean)) +\n  geom_ribbon(data = forecasted, aes(x = year, ymin = lower$`80%`, ymax = upper$`80%`), linetype=2, alpha=0.2) +\n  geom_ribbon(data = forecasted, aes(x = year, ymin = lower$`95%`, ymax = upper$`95%`), linetype=2, alpha=0.1)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#overview",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#overview",
    "title": "Take-home Exercise 4",
    "section": "",
    "text": "In this take home exercise we are going to prototype plots that are going to be used for the final project ‘outlook of Singapore economic’. Here, we are going to focus on 2 dataset:\n\nForeign Direct Investment: By Industry\nForeign Direct Investment: By Region and Country\n\nFurthermore, we are going to separate the plotting into 2 type:\n\nHistorical\nForecast (nowcasting)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#getting-started",
    "title": "Take-home Exercise 4",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting Packages\n\npacman::p_load(tidyverse, forecast, ggthemes, ggiraph, scales)\n\n\n\nImporting Data\n\nFDI_industry &lt;- read_csv('data/FDI_Industry.csv')\nFDI_region &lt;- read_csv('data/FDI_Region.csv')\n\n\n\nData Wrangling\nPivoting the table to ease plotting and filtering in the future\n\nFDI_industry &lt;- FDI_industry %&gt;%\n  pivot_longer(!Year, names_to = \"Industry\", values_to = \"Value\")\nFDI_region &lt;- FDI_region %&gt;%\n  pivot_longer(!Year, names_to = \"Region\", values_to = \"Value\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#plot-i-historical-data",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#plot-i-historical-data",
    "title": "Take-home Exercise 4",
    "section": "Plot I: Historical Data",
    "text": "Plot I: Historical Data\n\nIndustry\nto mimic our final product we are going to use input variables\n\navail_cat &lt;- unique(FDI_industry$Industry)\n\n# We can put all unwanted category to input_cat \n# input_cat &lt;- c(\"Total\",\"Financial & Insurance Services\", \"Wholesale & Retail Trade\", \"Manufacturing\",\"Professional, Administrative & Support Services\", \"Transport & Storage\")\ninput_cat &lt;- c()\n\nplot_cat &lt;- avail_cat[!avail_cat %in% input_cat]\n\nFiltering the data in to only keep chosen category\n\n#Filtering the data to only wanted category\nplot_data &lt;- FDI_industry %&gt;%\n  filter(Industry %in% plot_cat)\n\ncreating the tool tip for interactive plot\n\n#Creating tooltip for hover\nplot_data$tooltip &lt;- c(paste0(\n  \"Year = \", plot_data$Year,\n  \"\\n Value = \", dollar(plot_data$Value),\n  \"\\n Industry = \", plot_data$Industry \n))\n\nsince there are difference max value, its better to scale y axis accordingly to improve readability of the plot.\n\n#choosing y_scale for better view\nif(max(plot_data$Value) &gt; 1000000) {\n  y_scale &lt;- round( (max(plot_data$Value)/10) / 1e5) * 1e5\n} else if (max(plot_data$Value) &lt; 100000) {\n  y_scale &lt;- 10000\n} else {\n  y_scale &lt;- 50000\n}\n\nplotting the graph of historical value of the FDI for selected industry\n\n#plotting\np &lt;- ggplot(plot_data) +\n  geom_line(aes(x = Year, \n                y = Value, \n                color = Industry)) +\n  geom_point_interactive(aes(x = Year, \n                             y = Value, \n                             color = Industry,\n                             tooltip = tooltip),\n                         size = 0.5) +\n  scale_y_continuous(\"Value (mn $SGD)\", breaks = seq(0, max(plot_data$Value),y_scale)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(colour = \"grey75\"),\n        panel.background = element_rect(fill = \"white\"),\n        axis.title.y = element_text(size = 8)) +\n  ggtitle(\"Foreign Direct Investment by Industry\") \n\n#interactivity\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nRegion\nto mimic our final product we are going to use input variables\n\navail_cat &lt;- unique(FDI_region$Region)\n\n# We can put all wanted category to input_cat, note: different from before\ninput_cat &lt;- c(\"Indonesia\", \"Malaysia\", \"ASEAN\")\n\n# Prevent wrong input\nplot_cat &lt;- avail_cat[avail_cat %in% input_cat]\n\nFiltering the data in to only keep chosen category\n\n#Filtering the data to only wanted category\nplot_data &lt;- FDI_region %&gt;%\n  filter(Region %in% plot_cat)\n\ncreating the tool tip for interactive plot\n\n#Creating tooltip for hover\nplot_data$tooltip &lt;- c(paste0(\n  \"Year = \", plot_data$Year,\n  \"\\n Value = \", dollar(plot_data$Value),\n  \"\\n Region = \", plot_data$Region \n))\n\nsince there are difference max value, its better to scale y axis accordingly to improve readability of the plot.\n\n#choosing y_scale for better view\nif(max(plot_data$Value) &gt; 1000000) {\n  y_scale &lt;- round( (max(plot_data$Value)/10) / 1e5) * 1e5\n} else if (max(plot_data$Value) &lt; 100000) {\n  y_scale &lt;- 10000\n} else {\n  y_scale &lt;- 50000\n}\n\nplotting the graph of historical value of the FDI for selected Country\n\n#plotting\np &lt;- ggplot(plot_data) +\n  geom_line(aes(x = Year, \n                y = Value, \n                color = Region)) +\n  geom_point_interactive(aes(x = Year, \n                             y = Value, \n                             color = Region,\n                             tooltip = tooltip),\n                         size = 0.5) +\n  scale_y_continuous(\"Value (mn $SGD)\", breaks = seq(0, max(plot_data$Value),y_scale)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(colour = \"grey75\"),\n        panel.background = element_rect(fill = \"white\"),\n        axis.title.y = element_text(size = 8),\n        legend.position = \"none\") +\n  ggtitle(\"Foreign Direct Investment by Region\") \n\n#interactivity\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#plot-ii-forecasting",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#plot-ii-forecasting",
    "title": "Take-home Exercise 4",
    "section": "Plot II : Forecasting",
    "text": "Plot II : Forecasting\n\nIndustry\nto mimic our final product we are going to use input variables\n\n#Input\ninput_cat &lt;- \"Financial & Insurance Services\"\ninput_h &lt;- 5\ninput_year &lt;- \"2000\"\n\nFiltering the data in to only keep chosen industry, and changing the type to time series to be able to be forecasted / nowcasted using ARIMA\n\n#preparing data based on input\nplot_data &lt;-FDI_industry %&gt;%\n  filter(Industry == input_cat,\n         Year &gt;= input_year) \n\n#changing to time series for arima model\nmodel_data &lt;- plot_data %&gt;%\n  select(Value) %&gt;%\n  as.ts(star)\n\nusing auto.arima function of forecast package of r to train and get the best model for the forecasting\n\n#training model and forcasting\nmodel &lt;- auto.arima(model_data)\nforecasted_values &lt;- forecast(model, h = input_h)\n\ncompiling the data forecasted from the model to be use for plotting\n\n#creating data for plotting the forcasted data\nforecasted &lt;- as.tibble(forecasted_values$mean) \nforecasted$Year &lt;- seq(max(plot_data$Year)+1, max(plot_data$Year)+input_h,1) \nforecasted$Upper &lt;- as.tibble(forecasted_values$upper)\nforecasted$Lower &lt;- as.tibble(forecasted_values$lower)\n\nforecasted &lt;- forecasted %&gt;%\n  mutate(Mean = as.integer(x))\n\nforecasted$Industry &lt;- input_cat\n\nsince there are difference max value, its better to scale y axis accordingly to improve readability of the plot.\n\n#choosing y scale for better view\nif(max(forecasted$Upper) &gt; 1000000) {\n  y_scale &lt;- round( (max(forecasted$Upper)/10) / 1e5) * 1e5\n} else if (max(forecasted$Upper) &lt; 100000) {\n  y_scale &lt;- 10000\n} else {\n  y_scale &lt;- 50000\n}\n\ncreating the tool tip for interactive plot\n\n#Preparing tooltip for hover view\nplot_data$tooltip &lt;- c(paste0(\n  \"Year = \", plot_data$Year,\n  \"\\n Value = \", dollar(plot_data$Value),\n  \"\\n Industry = \", plot_data$Industry \n))\nforecasted$tooltip &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Mean Value = \", dollar(forecasted$Mean),\n  \"\\n Industry = \", forecasted$Industry \n))\nforecasted$tooltip_upper_95 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Upper$`95%`),\n  \"\\n Industry = \", forecasted$Industry \n))\nforecasted$tooltip_lower_95 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Lower$`95%`),\n  \"\\n Industry = \", forecasted$Industry \n))\nforecasted$tooltip_upper_80 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Upper$`80%`),\n  \"\\n Industry = \", forecasted$Industry \n))\nforecasted$tooltip_lower_80 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Lower$`80%`),\n  \"\\n Industry = \", forecasted$Industry \n))\n\nplotting the forecasted value of the FDI with 80 and 95 per cent confidence level\n\n#plotting\np &lt;- ggplot() +\n  geom_line(data = plot_data, \n            aes(x = Year, \n                y = Value, \n                color = Industry)) +\n  geom_line(data = forecasted, \n            aes(x = Year, \n                y = Mean, \n                color = Industry)) +\n  geom_ribbon(data = forecasted, \n              aes(x = Year, \n                  ymin = Lower$`80%`, \n                  ymax = Upper$`80%`, \n                  color = Industry), \n              linetype=2, \n              alpha=0.1) +\n  geom_ribbon(data = forecasted, \n              aes(x = Year, \n                  ymin = Lower$`95%`, \n                  ymax = Upper$`95%`, \n                  color = Industry), \n              linetype=2, \n              alpha=0.2) +\n  geom_point_interactive(data = plot_data,\n                         aes(x = Year, \n                             y = Value, \n                             color = Industry,\n                             tooltip = tooltip),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Mean, \n                             color = Industry,\n                             tooltip = tooltip),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Upper$`95%`, \n                             color = Industry,\n                             tooltip = tooltip_upper_95),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Lower$`95%`, \n                             color = Industry,\n                             tooltip = tooltip_lower_95),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Upper$`80%`, \n                             color = Industry,\n                             tooltip = tooltip_upper_80),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Lower$`80%`, \n                             color = Industry,\n                             tooltip = tooltip_lower_80),\n                         size = 0.5) +\n  scale_y_continuous(\"Value (mn $SGD)\", breaks = seq(0, max(forecasted$Upper),y_scale)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(colour = \"grey75\"),\n        panel.background = element_rect(fill = \"white\"),\n        axis.title.y = element_text(size = 8)) +\n  ggtitle(paste0(\"Forecasted Foreign Direct Investment from \", input_cat))\n\n#interactivity\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)\n\n\n\n\n\n\n\nRegion\nto mimic our final product we are going to use input variables\n\n#Input\ninput_cat &lt;- \"Indonesia\"\ninput_h &lt;- 5\ninput_year &lt;- \"2000\"\n\nFiltering the data in to only keep chosen industry, and changing the type to time series to be able to be forecasted / nowcasted using ARIMA\n\n#preparing data based on input\nplot_data &lt;-FDI_region %&gt;%\n  filter(Region == input_cat,\n         Year &gt;= input_year) \n\n#changing to time series for arima model\nmodel_data &lt;- plot_data %&gt;%\n  select(Value) %&gt;%\n  as.ts()\n\nusing auto.arima function of forecast package of r to train and get the best model for the forecasting\n\n#training model and forcasting\nmodel &lt;- auto.arima(model_data)\nforecasted_values &lt;- forecast(model, h = input_h)\n\ncompiling the data forecasted from the model to be use for plotting\n\n#creating data for plotting the forcasted data\nforecasted &lt;- as.tibble(forecasted_values$mean) \nforecasted$Year &lt;- seq(max(plot_data$Year)+1, max(plot_data$Year)+input_h,1) \nforecasted$Upper &lt;- as.tibble(forecasted_values$upper)\nforecasted$Lower &lt;- as.tibble(forecasted_values$lower)\n\nforecasted &lt;- forecasted %&gt;%\n  mutate(Mean = as.integer(x))\n\nforecasted$Region &lt;- input_cat\n\nsince there are difference max value, its better to scale y axis accordingly to improve readability of the plot.\n\n#choosing y scale for better view\nif(max(forecasted$Upper) &gt; 1000000) {\n  y_scale &lt;- round( (max(forecasted$Upper)/10) / 1e5) * 1e5\n} else if (max(forecasted$Upper) &lt; 100000) {\n  y_scale &lt;- 10000\n} else {\n  y_scale &lt;- 50000\n}\n\ncreating the tool tip for interactive plot\n\n#Preparing tooltip for hover view\nplot_data$tooltip &lt;- c(paste0(\n  \"Year = \", plot_data$Year,\n  \"\\n Value = \", dollar(plot_data$Value),\n  \"\\n Region = \", plot_data$Region \n))\nforecasted$tooltip &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Mean Value = \", dollar(forecasted$Mean),\n  \"\\n Region = \", forecasted$Region \n))\nforecasted$tooltip_upper_95 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Upper$`95%`),\n  \"\\n Region = \", forecasted$Region \n))\nforecasted$tooltip_lower_95 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Lower$`95%`),\n  \"\\n Region = \", forecasted$Region \n))\nforecasted$tooltip_upper_80 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Upper$`80%`),\n  \"\\n Region = \", forecasted$Region \n))\nforecasted$tooltip_lower_80 &lt;- c(paste0(\n  \"Year = \", forecasted$Year,\n  \"\\n Value = \", dollar(forecasted$Lower$`80%`),\n  \"\\n Region = \", forecasted$Region \n))\n\nplotting the forecasted value of the FDI with 80 and 95 per cent confidence levels\n\n#plotting\np &lt;- ggplot() +\n  geom_line(data = plot_data, \n            aes(x = Year, \n                y = Value, \n                color = Region)) +\n  geom_line(data = forecasted, \n            aes(x = Year, \n                y = Mean, \n                color = Region)) +\n  geom_ribbon(data = forecasted, \n              aes(x = Year, \n                  ymin = Lower$`80%`, \n                  ymax = Upper$`80%`, \n                  color = Region), \n              linetype=2, \n              alpha=0.1) +\n  geom_ribbon(data = forecasted, \n              aes(x = Year, \n                  ymin = Lower$`95%`, \n                  ymax = Upper$`95%`, \n                  color = Region), \n              linetype=2, \n              alpha=0.2) +\n  geom_point_interactive(data = plot_data,\n                         aes(x = Year, \n                             y = Value, \n                             color = Region,\n                             tooltip = tooltip),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Mean, \n                             color = Region,\n                             tooltip = tooltip),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Upper$`95%`, \n                             color = Region,\n                             tooltip = tooltip_upper_95),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Lower$`95%`, \n                             color = Region,\n                             tooltip = tooltip_lower_95),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Upper$`80%`, \n                             color = Region,\n                             tooltip = tooltip_upper_80),\n                         size = 0.5) +\n  geom_point_interactive(data = forecasted,\n                         aes(x = Year, \n                             y = Lower$`80%`, \n                             color = Region,\n                             tooltip = tooltip_lower_80),\n                         size = 0.5) +\n  scale_y_continuous(\"Value (mn $SGD)\", breaks = seq(0, max(forecasted$Upper),y_scale)) +\n  theme(panel.grid.minor = element_blank(),\n        panel.grid.major = element_line(colour = \"grey75\"),\n        panel.background = element_rect(fill = \"white\"),\n        axis.title.y = element_text(size = 8)) +\n  ggtitle(paste0(\"Forecasted Foreign Direct Investment from \", input_cat))\n\n#interactivity\ngirafe(\n  ggobj = p,\n  width_svg = 6,\n  height_svg = 6*0.618\n)"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#user-interface",
    "href": "Take-home_Ex/Take-home_Ex4/Take-home_Ex4.html#user-interface",
    "title": "Take-home Exercise 4",
    "section": "User Interface",
    "text": "User Interface\n\n\nUI Components:\n\nTitle and Tabs: utilising navbarPage to create both tab of historical and nowcast view, and titlepanel to create the main title\nsidebar for input selections: selection of dataset, method, years, and forecast duration using sidebarPanel\nmain panel for plot output (plotOutput) and text output (verbatimTextOutput)\n\nserver design:\n\nDataset: using the dataset based on the inputs on the drop down\nsubset data: using reactive drop down based one then dataset selected\nforecasting using the method chosen\nplotting the historical/nowcasted graph\noutput display for the plot\n\nfor the inputs:\n\nselectInput() for dropdown\nnumericInput()\nactionButton() for the trigger\nplotOutput() place holder of the plot"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex7/data/geospatial/MPSZ-2019.html",
    "href": "In-class_Ex/In-class_Ex7/data/geospatial/MPSZ-2019.html",
    "title": "ISSS608",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex7/In-class_Ex7.html",
    "href": "In-class_Ex/In-class_Ex7/In-class_Ex7.html",
    "title": "In-Class_Ex 7",
    "section": "",
    "text": "pacman::p_load(sf, terra, gstat, tmap, viridis, tidyverse)\n\n\nrfstations &lt;-\n  read.csv('data/aspatial/RainfallStation.csv')\n\n\nrfdata &lt;-\n  read.csv('data/aspatial/DAILYDATA_202402.csv') %&gt;%\n  dplyr::select(c(1,5)) %&gt;%\n  group_by(Station) %&gt;%\n  summarise (MONTHSUM = sum(`Daily.Rainfall.Total..mm.`)) %&gt;%\n  ungroup()\n\n\nrfdata &lt;- rfdata %&gt;%\n  left_join(rfstations)\n\n\nrfdata_sf &lt;- st_as_sf(rfdata,\n                      coords = c(\"Longitude\",\n                                 \"Latitude\"),\n                      crs = 4326) %&gt;%\n  st_transform(crs = 3414)\n\n\nmpsz2019 &lt;- st_read(dsn = 'data/geospatial',\n                    layer = \"MPSZ-2019\") %&gt;%\n  st_transform(crs = 3414)\n\nReading layer `MPSZ-2019' from data source \n  `/Users/michaelberlian/Desktop/SMU Jan/ISSS 608 VAA/ISSS608/In-class_Ex/In-class_Ex7/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\n\n\ntmap_options(check.and.fix = TRUE)\ntmap_mode(\"view\")\ntm_shape(mpsz2019) +\n  tm_borders() +\ntm_shape(rfdata_sf) +\n  tm_dots(col = \"MONTHSUM\")\n\n\n\n\ntmap_mode(\"plot\")\n\n\ngrid &lt;- terra::rast(mpsz2019,\n                    nrow = 690,\n                    ncols = 1075)\n\nxy &lt;- terra::xyFromCell(grid,\n                        1:ncell(grid))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#overview",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#overview",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "",
    "text": "By the end of this hands-on exercise, you will be able to:\n\ncreate bullet chart by using ggplot2,\ncreate sparklines by using ggplot2 ,\nbuild industry standard dashboard by using R Shiny."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#getting-started",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "Getting Started",
    "text": "Getting Started\n\nImporting Package\n\ntidyverse provides a collection of functions for performing data science task such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to readr, tidyr, dplyr, ggplot, tibble, stringr, forcats and purrr.\nlubridate provides functions to work with dates and times more efficiently.\nggthemes is an extension of ggplot2. It provides additional themes beyond the basic themes of ggplot2.\ngtExtras provides some additional helper functions to assist in creating beautiful tables with gt, an R package specially designed for anyone to make wonderful-looking tables using the R programming language.\nreactable provides functions to create interactive data tables for R, based on the React Table library and made with reactR.\nreactablefmtr provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes.\n\n\npacman::p_load(lubridate, ggthemes, reactable,\nreactablefmtr, gt, gtExtras, tidyverse, RODBC)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#microsoft-access-database",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#microsoft-access-database",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "Microsoft Access Database",
    "text": "Microsoft Access Database\n\nImporting Data\nwe are going to use CoffeeChain.mdb dataset, we are going to import it using odbcConnectAccess() from RODBC package\n\nlibrary(RODBC)\ncon &lt;- odbcConnectAccess2007('data/Coffee Chain.mdb')\ncoffeechain &lt;- sqlFetch(con, 'CoffeeChain Query')\nwrite_rds(coffeechain, \"data/CoffeeChain.rds\")\nodbcClose(con)\n\nusing the rds instead of the microsoft access\n\ncoffeechain &lt;- read_rds(\"data/rds/CoffeeChain.rds\")\n\nwrangling the dataset, summarising data\n\nproduct &lt;- coffeechain %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`target` = sum(`Budget Sales`),\n            `current` = sum(`Sales`)) %&gt;%\n  ungroup()\n\npreview of the dataset\n\nggplot(product, aes(Product, current)) + \n  geom_col(aes(Product, max(target) * 1.01),\n           fill=\"grey85\", width=0.85) +\n  geom_col(aes(Product, target * 0.75),\n           fill=\"grey60\", width=0.85) +\n  geom_col(aes(Product, target * 0.5),\n           fill=\"grey50\", width=0.85) +\n  geom_col(aes(Product, current), \n           width=0.35,\n           fill = \"black\") + \n  geom_errorbar(aes(y = target,\n                    x = Product, \n                    ymin = target,\n                    ymax= target), \n                width = .4,\n                colour = \"red\",\n                size = 1) +\n  coord_flip()"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#plotting-sparklines-using-ggplot2",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#plotting-sparklines-using-ggplot2",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "Plotting sparklines using ggplot2",
    "text": "Plotting sparklines using ggplot2\n\nData Preparation\ngroup the sales by month and product\n\nsales_report &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  mutate(Month = month(Date)) %&gt;%\n  group_by(Month, Product) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup() %&gt;%\n  select(Month, Product, Sales)\n\nfind the month with maximum and minimum sales, and also the latest month of sale\n\nmins &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.min(Sales))\nmaxs &lt;- group_by(sales_report, Product) %&gt;% \n  slice(which.max(Sales))\nends &lt;- group_by(sales_report, Product) %&gt;% \n  filter(Month == max(Month))\n\ncompute the q1 and q3 (25 and 75 quantiles)\n\nquarts &lt;- sales_report %&gt;%\n  group_by(Product) %&gt;%\n  summarise(quart1 = quantile(Sales, \n                              0.25),\n            quart2 = quantile(Sales, \n                              0.75)) %&gt;%\n  right_join(sales_report)\n\n\n\nPlotting Sparklines\n\nggplot(sales_report, aes(x=Month, y=Sales)) + \n  facet_grid(Product ~ ., scales = \"free_y\") + \n  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2), \n              fill = 'grey90') +\n  geom_line(size=0.3) +\n  geom_point(data = mins, col = 'red') +\n  geom_point(data = maxs, col = 'blue') +\n  geom_text(data = mins, aes(label = Sales), vjust = -1) +\n  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +\n  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +\n  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +\n  expand_limits(x = max(sales_report$Month) + \n                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +\n  scale_x_continuous(breaks = seq(1, 12, 1)) +\n  scale_y_continuous(expand = c(0.1, 0)) +\n  theme_tufte(base_size = 3, base_family = \"Helvetica\") +\n  theme(axis.title=element_blank(), axis.text.y = element_blank(), \n        axis.ticks = element_blank(), strip.text = element_blank())"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#static-information-dashboard-design-gt-and-gtextras-methods",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "Static Information Dashboard Design: gt and gtExtras methods",
    "text": "Static Information Dashboard Design: gt and gtExtras methods\n\nBullet Chard\n\nproduct %&gt;%\n  gt::gt() %&gt;%\n  gt_plt_bullet(column = current, \n              target = target, \n              width = 60,\n              palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\nProduct\ncurrent\n\n\n\n\nAmaretto\n\n\n\n   \n\n\n\nCaffe Latte\n\n\n\n   \n\n\n\nCaffe Mocha\n\n\n\n   \n\n\n\nChamomile\n\n\n\n   \n\n\n\nColombian\n\n\n\n   \n\n\n\nDarjeeling\n\n\n\n   \n\n\n\nDecaf Espresso\n\n\n\n   \n\n\n\nDecaf Irish Cream\n\n\n\n   \n\n\n\nEarl Grey\n\n\n\n   \n\n\n\nGreen Tea\n\n\n\n   \n\n\n\nLemon\n\n\n\n   \n\n\n\nMint\n\n\n\n   \n\n\n\nRegular Espresso"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#sparklines-gtextra",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#sparklines-gtextra",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "Sparklines: gtExtra",
    "text": "Sparklines: gtExtra\n\nData Preparation\n\nreport &lt;- coffeechain %&gt;%\n  mutate(Year = year(Date)) %&gt;%\n  filter(Year == \"2013\") %&gt;%\n  mutate (Month = month(Date, \n                        label = TRUE, \n                        abbr = TRUE)) %&gt;%\n  group_by(Product, Month) %&gt;%\n  summarise(Sales = sum(Sales)) %&gt;%\n  ungroup()\n\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n# A tibble: 13 × 2\n   Product           `Monthly Sales`\n   &lt;chr&gt;             &lt;list&gt;         \n 1 Amaretto          &lt;dbl [12]&gt;     \n 2 Caffe Latte       &lt;dbl [12]&gt;     \n 3 Caffe Mocha       &lt;dbl [12]&gt;     \n 4 Chamomile         &lt;dbl [12]&gt;     \n 5 Colombian         &lt;dbl [12]&gt;     \n 6 Darjeeling        &lt;dbl [12]&gt;     \n 7 Decaf Espresso    &lt;dbl [12]&gt;     \n 8 Decaf Irish Cream &lt;dbl [12]&gt;     \n 9 Earl Grey         &lt;dbl [12]&gt;     \n10 Green Tea         &lt;dbl [12]&gt;     \n11 Lemon             &lt;dbl [12]&gt;     \n12 Mint              &lt;dbl [12]&gt;     \n13 Regular Espresso  &lt;dbl [12]&gt;     \n\n\n\n\nPlotting Coffeechain Sales Report\n\nreport %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\") %&gt;%\n   gt() %&gt;%\n   gt_plt_sparkline('Monthly Sales',\n                    same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMonthly Sales\n\n\n\n\nAmaretto\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n\n\n\n   3.7K\n\n\n\nChamomile\n\n\n\n   3.3K\n\n\n\nColombian\n\n\n\n   5.5K\n\n\n\nDarjeeling\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n\n\n\n   2.7K\n\n\n\nEarl Grey\n\n\n\n   3.0K\n\n\n\nGreen Tea\n\n\n\n   1.5K\n\n\n\nLemon\n\n\n\n   4.4K\n\n\n\nMint\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\nadding stats\n\nreport %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            ) %&gt;%\n  gt() %&gt;%\n  fmt_number(columns = 4,\n    decimals = 2)\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\n\n\n\n\nAmaretto\n1016\n1210\n1,119.00\n\n\nCaffe Latte\n1398\n1653\n1,528.33\n\n\nCaffe Mocha\n3322\n3828\n3,613.92\n\n\nChamomile\n2967\n3395\n3,217.42\n\n\nColombian\n5132\n5961\n5,457.25\n\n\nDarjeeling\n2926\n3281\n3,112.67\n\n\nDecaf Espresso\n3181\n3493\n3,326.83\n\n\nDecaf Irish Cream\n2463\n2901\n2,648.25\n\n\nEarl Grey\n2730\n3005\n2,841.83\n\n\nGreen Tea\n1339\n1476\n1,398.75\n\n\nLemon\n3851\n4418\n4,080.83\n\n\nMint\n1388\n1669\n1,519.17\n\n\nRegular Espresso\n890\n1218\n1,023.42\n\n\n\n\n\n\n\n\n\ncombining the dataframe\n\nspark &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize('Monthly Sales' = list(Sales), \n            .groups = \"drop\")\n\n\nsales &lt;- report %&gt;% \n  group_by(Product) %&gt;% \n  summarise(\"Min\" = min(Sales, na.rm = T),\n            \"Max\" = max(Sales, na.rm = T),\n            \"Average\" = mean(Sales, na.rm = T)\n            )\n\n\nsales_data = left_join(sales, spark)\n\n\n\nPlotting the combined sales data\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales',\n                   same_limit = FALSE)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K\n\n\n\n\n\n\n\n\n\n\ncombining the bullet chart, sparklines, and stats\n\nbullet &lt;- coffeechain %&gt;%\n  filter(Date &gt;= \"2013-01-01\") %&gt;%\n  group_by(`Product`) %&gt;%\n  summarise(`Target` = sum(`Budget Sales`),\n            `Actual` = sum(`Sales`)) %&gt;%\n  ungroup() \n\n\nsales_data = sales_data %&gt;%\n  left_join(bullet)\n\n\nsales_data %&gt;%\n  gt() %&gt;%\n  gt_plt_sparkline('Monthly Sales') %&gt;%\n  gt_plt_bullet(column = Actual, \n                target = Target, \n                width = 28,\n                palette = c(\"lightblue\", \n                          \"black\")) %&gt;%\n  gt_theme_538()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProduct\nMin\nMax\nAverage\nMonthly Sales\nActual\n\n\n\n\nAmaretto\n1016\n1210\n1119.000\n\n\n\n   1.2K\n\n\n\n\n   \n\n\n\nCaffe Latte\n1398\n1653\n1528.333\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nCaffe Mocha\n3322\n3828\n3613.917\n\n\n\n   3.7K\n\n\n\n\n   \n\n\n\nChamomile\n2967\n3395\n3217.417\n\n\n\n   3.3K\n\n\n\n\n   \n\n\n\nColombian\n5132\n5961\n5457.250\n\n\n\n   5.5K\n\n\n\n\n   \n\n\n\nDarjeeling\n2926\n3281\n3112.667\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nDecaf Espresso\n3181\n3493\n3326.833\n\n\n\n   3.2K\n\n\n\n\n   \n\n\n\nDecaf Irish Cream\n2463\n2901\n2648.250\n\n\n\n   2.7K\n\n\n\n\n   \n\n\n\nEarl Grey\n2730\n3005\n2841.833\n\n\n\n   3.0K\n\n\n\n\n   \n\n\n\nGreen Tea\n1339\n1476\n1398.750\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nLemon\n3851\n4418\n4080.833\n\n\n\n   4.4K\n\n\n\n\n   \n\n\n\nMint\n1388\n1669\n1519.167\n\n\n\n   1.5K\n\n\n\n\n   \n\n\n\nRegular Espresso\n890\n1218\n1023.417\n\n\n\n   1.1K"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#adding-interactivity-to-information-dashboard-using-reactable-and-reactablefmtr-method",
    "href": "Hands-on_Ex/Hands-on_Ex9/Hands-on_Ex9.html#adding-interactivity-to-information-dashboard-using-reactable-and-reactablefmtr-method",
    "title": "Hands-on Exercise 9: Information Dashboard Design",
    "section": "Adding interactivity to Information Dashboard using reactable and reactablefmtr method",
    "text": "Adding interactivity to Information Dashboard using reactable and reactablefmtr method\ndownloading and importing dataui package\n\nremotes::install_github(\"timelyportfolio/dataui\")\n\n\npacman::p_load(dataui)\n\n\nPlotting Interactive sparklines\n\nreport &lt;- report %&gt;%\n  group_by(Product) %&gt;%\n  summarize(`Monthly Sales` = list(Sales))\n\n\nreactable(\n  report,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\nChanging the page size\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(report)\n    )\n  )\n)\n\n\n\n\n\n\n\nAdding points and labels\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        labels = c(\"first\", \"last\")\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\nAdding reference line\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        statline = \"mean\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\nAdding bandline\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkline(\n        report,\n        highlight_points = highlight_points(\n          min = \"red\", max = \"blue\"),\n        line_width = 1,\n        bandline = \"innerquartiles\",\n        bandline_color = \"green\"\n        )\n    )\n  )\n)\n\n\n\n\n\n\n\nChanging sparkline to sparkbar\n\nreactable(\n  report,\n  defaultPageSize = 13,\n  columns = list(\n    Product = colDef(maxWidth = 200),\n    `Monthly Sales` = colDef(\n      cell = react_sparkbar(\n        report,\n        highlight_bars = highlight_bars(\n          min = \"red\", max = \"blue\"),\n        bandline = \"innerquartiles\",\n        statline = \"mean\")\n    )\n  )\n)"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex9/In-class_Ex9.html",
    "href": "In-class_Ex/In-class_Ex9/In-class_Ex9.html",
    "title": "In-class Exercise 9",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, tidyverse, graphlayouts)\n\n\n\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nchanging the data into proper type\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nmake the counts of email between the source person, target person, and when\nfilter the source and target person to remove own cc-ed email\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n  summarise(Weight = n()) %&gt;%\n  filter(source != target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex9/In-class_Ex9.html#getting-started",
    "href": "In-class_Ex/In-class_Ex9/In-class_Ex9.html#getting-started",
    "title": "In-class Exercise 9",
    "section": "",
    "text": "pacman::p_load(igraph, tidygraph, ggraph, visNetwork, lubridate, clock, tidyverse, graphlayouts)\n\n\n\n\n\nGAStech_nodes &lt;- read_csv(\"data/GAStech_email_node.csv\")\nGAStech_edges &lt;- read_csv(\"data/GAStech_email_edge-v2.csv\")\n\n\n\n\nchanging the data into proper type\n\nGAStech_edges &lt;- GAStech_edges %&gt;%\n  mutate(SendDate = dmy(SentDate)) %&gt;%\n  mutate(Weekday = wday(SentDate,\n                        label = TRUE,\n                        abbr = FALSE))\n\nmake the counts of email between the source person, target person, and when\nfilter the source and target person to remove own cc-ed email\n\nGAStech_edges_aggregated &lt;- GAStech_edges %&gt;%\n  filter(MainSubject == \"Work related\") %&gt;%\n  group_by(source, target, Weekday) %&gt;%\n  summarise(Weight = n()) %&gt;%\n  filter(source != target) %&gt;%\n  filter(Weight &gt; 1) %&gt;%\n  ungroup()"
  },
  {
    "objectID": "In-class_Ex/In-class_Ex9/In-class_Ex9.html#graphing",
    "href": "In-class_Ex/In-class_Ex9/In-class_Ex9.html#graphing",
    "title": "In-class Exercise 9",
    "section": "Graphing",
    "text": "Graphing\ncombining the nodes and edges to make the connection graph\n\nGAStech_graph &lt;- tbl_graph(nodes = GAStech_nodes,\n                           edges = GAStech_edges_aggregated,\n                           directed = TRUE)\n\npreview of the graph\n\nGAStech_graph\n\n# A tbl_graph: 54 nodes and 1372 edges\n#\n# A directed multigraph with 1 component\n#\n# Node Data: 54 × 4 (active)\n      id label               Department     Title                               \n   &lt;dbl&gt; &lt;chr&gt;               &lt;chr&gt;          &lt;chr&gt;                               \n 1     1 Mat.Bramar          Administration Assistant to CEO                    \n 2     2 Anda.Ribera         Administration Assistant to CFO                    \n 3     3 Rachel.Pantanal     Administration Assistant to CIO                    \n 4     4 Linda.Lagos         Administration Assistant to COO                    \n 5     5 Ruscella.Mies.Haber Administration Assistant to Engineering Group Mana…\n 6     6 Carla.Forluniau     Administration Assistant to IT Group Manager       \n 7     7 Cornelia.Lais       Administration Assistant to Security Group Manager \n 8    44 Kanon.Herrero       Security       Badging Office                      \n 9    45 Varja.Lagos         Security       Badging Office                      \n10    46 Stenig.Fusil        Security       Building Control                    \n# ℹ 44 more rows\n#\n# Edge Data: 1,372 × 4\n   from    to Weekday Weight\n  &lt;int&gt; &lt;int&gt; &lt;ord&gt;    &lt;int&gt;\n1     1     2 Sunday       5\n2     1     2 Monday       2\n3     1     2 Tuesday      3\n# ℹ 1,369 more rows\n\n\ngraphing\n\nggraph(GAStech_graph) +\n  geom_edge_link() +\n  geom_node_point()\n\n\n\n\n\n\n\n\n\ng &lt;- ggraph(GAStech_graph) +\n  geom_edge_link(aes(colour = 'grey50')) +\n  geom_node_point(aes(colour = 'grey40'))\n\ng + theme_graph(background = \"grey10\",\n                text_colour = \"white\")\n\n\n\n\n\n\n\n\n\ng &lt;-ggraph(GAStech_graph,\n           layout = \"fr\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes())\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\ng &lt;-ggraph(GAStech_graph,\n           layout = \"nicely\") +\n  geom_edge_link(aes()) +\n  geom_node_point(aes(colour = Department),\n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\ng &lt;-ggraph(GAStech_graph,\n           layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight),\n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) + \n  geom_node_point(aes(colour = Department),\n                  size = 3)\n\ng + theme_graph()\n\n\n\n\n\n\n\n\n\nset_graph_style()\n\ng &lt;-ggraph(GAStech_graph,\n           layout = \"nicely\") +\n  geom_edge_link(aes(width=Weight),\n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.1, 5)) + \n  geom_node_point(aes(colour = Department),\n                  size = 2) \n\ng + facet_edges(~Weekday)\n\n\n\n\n\n\n\n\n\ng &lt;- GAStech_graph %&gt;%\n  mutate(betweenness_centrality = centrality_betweenness()) %&gt;%\n  ggraph(layout = \"fr\") +\n  geom_edge_link(aes(width = Weight),\n                 alpha = 0.2) +\n  scale_edge_width(range = c(0.5,1)) +\n  geom_node_point(aes(colour = Department,\n                      size = betweenness_centrality))\n\ng + theme_graph()"
  }
]